Sentence,WUGgedSentence,Score,LenFacScore,CleanedParse,GoodBad,Filename,pair_id,field,linguistics_term,Grammar,good_score,bad_score,correct_pair
Name went fishing Name .,Name went fishing Name .,-28.684831235163227,-5.736966247032646,(ROOT (P_Name _Name) (VP (VBD _went) (VP (VBG _fishing) (NP _Name))) (P_. _.)),bad,causative,116,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.262990799124481,-5.736966247032646,TRUE
Name sits down Name .,Name sits down Name .,-26.314953995622403,-5.262990799124481,(ROOT (P_Name _Name) (VP (VBZ _sits) (PP (IN _down) (NP _Name))) (P_. _.)),good,causative,116,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.262990799124481,-5.736966247032646,TRUE
Name went fishing Name .,Name went fishing Name .,-27.50097216201671,-5.500194432403342,(ROOT (NNP _Name) (VP (VBD _went) (NP (NN _fishing) (P_Name _Name))) (. _.)),bad,causative,116,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.087712589393254,-5.500194432403342,TRUE
Name sits down Name .,Name sits down Name .,-25.438562946966268,-5.087712589393254,(ROOT (NNP _Name) (VP (VBZ _sits) (RP _down) (NP _Name)) (. _.)),good,causative,116,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.087712589393254,-5.500194432403342,TRUE
Name went fishing Name .,Name went fishing Name .,-27.726265083791585,-5.545253016758317,(ROOT (P_Name _Name) (VP (VBD _went) (NP (NN _fishing) (NNP _Name))) (P_. _.)),bad,causative,116,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.933822176488887,-5.545253016758317,TRUE
Name sits down Name .,Name sits down Name .,-24.669110882444436,-4.933822176488887,(ROOT (P_Name _Name) (VP (VBZ _sits) (PRT _down) (NP _Name)) (P_. _.)),good,causative,116,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.933822176488887,-5.545253016758317,TRUE
Name went fishing Name .,Name went fishing Name .,-27.927651092705027,-5.585530218541005,(ROOT (NNP _Name) (VP (VBD _went) (NP (NN _fishing) (P_Name _Name))) (P_. _.)),bad,causative,116,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.957312656093711,-5.585530218541005,TRUE
Name sits down Name .,Name sits down Name .,-24.786563280468556,-4.957312656093711,(ROOT (NNP _Name) (VP (VBZ _sits) (PRT _down) (NP _Name)) (P_. _.)),good,causative,116,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.957312656093711,-5.585530218541005,TRUE
Name went fishing Name .,Name went fishing Name .,-28.96381340322129,-5.792762680644258,(ROOT (P_Name _Name) (VP (VBD _went) (VP (VBG _fishing) (NP _Name))) (. _.)),bad,causative,116,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.882570277170108,-5.792762680644258,TRUE
Name sits down Name .,Name sits down Name .,-24.412851385850537,-4.882570277170108,(ROOT (P_Name _Name) (VP (VBZ _sits) (RP _down) (NP _Name)) (. _.)),good,causative,116,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.882570277170108,-5.792762680644258,TRUE
Name went fishing Name .,Name went fishing Name .,-28.80391322698224,-5.760782645396448,(ROOT (P_Name _Name) (VP (VBD _went) (NP (NN _fishing) (P_Name _Name))) (P_. _.)),bad,causative,116,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.882099658863217,-5.760782645396448,TRUE
Name sits down Name .,Name sits down Name .,-24.41049829431608,-4.882099658863217,(ROOT (P_Name _Name) (VP (VBZ _sits) (PRT _down) (NP _Name)) (P_. _.)),good,causative,116,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.882099658863217,-5.760782645396448,TRUE
Name went fishing Name .,Name went fishing Name .,-28.830109905969053,-5.766021981193811,(ROOT (NNP _Name) (VP (VBD _went) (VP (VBG _fishing) (NP _Name))) (P_. _.)),bad,causative,116,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.160278045446017,-5.766021981193811,TRUE
Name sits down Name .,Name sits down Name .,-25.801390227230083,-5.160278045446017,(ROOT (NNP _Name) (VP (VBZ _sits) (PRT _down) (NP _Name)) (P_. _.)),good,causative,116,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.160278045446017,-5.766021981193811,TRUE
Name went fishing Name .,Name went fishing Name .,-29.06990998018217,-5.813981996036434,(ROOT (NNP _Name) (VP (VBD _went) (NP (NN _fishing) (NNP _Name))) (. _.)),bad,causative,116,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.854900774905632,-5.813981996036434,TRUE
Name sits down Name .,Name sits down Name .,-24.27450387452816,-4.854900774905632,(ROOT (NNP _Name) (VP (VBZ _sits) (RP _down) (NP _Name)) (. _.)),good,causative,116,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.854900774905632,-5.813981996036434,TRUE
Name went fishing Name .,Name went fishing Name .,-28.565822164507935,-5.713164432901587,(ROOT (P_Name _Name) (VP (VBD _went) (NP (NN _fishing) (NNP _Name))) (P_. _.)),bad,causative,116,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.775526462302111,-5.713164432901587,TRUE
Name sits down Name .,Name sits down Name .,-23.877632311510556,-4.775526462302111,(ROOT (P_Name _Name) (VP (VBZ _sits) (RP _down) (NP _Name)) (P_. _.)),good,causative,116,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.775526462302111,-5.713164432901587,TRUE
Name went fishing Name .,Name went fishing Name .,-27.570175530955886,-5.514035106191177,(ROOT (P_Name _Name) (VP (VBD _went) (VP (VBG _fishing) (NP _Name))) (. _.)),bad,causative,116,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.82740987315095,-5.514035106191177,TRUE
Name sits down Name .,Name sits down Name .,-24.13704936575475,-4.82740987315095,(ROOT (P_Name _Name) (VP (VBZ _sits) (PRT _down) (NP _Name)) (. _.)),good,causative,116,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.82740987315095,-5.514035106191177,TRUE
Name rolled the cars .,Name rolled the cars .,-24.662024099991804,-4.932404819998361,(ROOT (P_Name _Name) (VP (VBD _rolled) (NP (P_the _the) (NNS _cars))) (P_. _.)),good,causative,121,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.932404819998361,-4.579753229804231,FALSE
Name fell the cars .,Name fell the cars .,-22.898766149021153,-4.579753229804231,(ROOT (P_Name _Name) (VP (VBD _fell) (NP (P_the _the) (NNS _cars))) (P_. _.)),bad,causative,121,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.932404819998361,-4.579753229804231,FALSE
Name rolled the cars .,Name rolled the cars .,-25.535328754173566,-5.107065750834713,(ROOT (NNP _Name) (VP (VBD _rolled) (NP (P_the _the) (NNS _cars))) (. _.)),good,causative,121,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.107065750834713,-4.628069881524714,FALSE
Name fell the cars .,Name fell the cars .,-23.140349407623567,-4.628069881524714,(ROOT (NNP _Name) (VP (VBD _fell) (NP (P_the _the) (NNS _cars))) (. _.)),bad,causative,121,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.107065750834713,-4.628069881524714,FALSE
Name rolled the cars .,Name rolled the cars .,-25.68655549267532,-5.137311098535064,(ROOT (P_Name _Name) (VP (VBD _rolled) (NP (P_the _the) (NNS _cars))) (P_. _.)),good,causative,121,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.137311098535064,-4.734873044721596,FALSE
Name fell the cars .,Name fell the cars .,-23.67436522360798,-4.734873044721596,(ROOT (P_Name _Name) (VP (VBD _fell) (NP (P_the _the) (NNS _cars))) (P_. _.)),bad,causative,121,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.137311098535064,-4.734873044721596,FALSE
Name rolled the cars .,Name rolled the cars .,-24.637655827841858,-4.927531165568372,(ROOT (NNP _Name) (VP (VBD _rolled) (NP (P_the _the) (NNS _cars))) (P_. _.)),good,causative,121,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.927531165568372,-4.572553896042113,FALSE
Name fell the cars .,Name fell the cars .,-22.862769480210563,-4.572553896042113,(ROOT (NNP _Name) (VP (VBD _fell) (NP (P_the _the) (NNS _cars))) (P_. _.)),bad,causative,121,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.927531165568372,-4.572553896042113,FALSE
Name rolled the cars .,Name rolled the cars .,-25.068229393297877,-5.013645878659576,(ROOT (NP _Name) (VBD _rolled) (NP (P_the _the) (NNS _cars)) (. _.)),good,causative,121,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.013645878659576,-4.486891853309536,FALSE
Name fell the cars .,Name fell the cars .,-22.43445926654768,-4.486891853309536,(ROOT (NP _Name) (VBD _fell) (NP (P_the _the) (NNS _cars)) (. _.)),bad,causative,121,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.013645878659576,-4.486891853309536,FALSE
Name rolled the cars .,Name rolled the cars .,-24.925146158081866,-4.985029231616373,(ROOT (P_Name _Name) (VP (VBN _rolled) (NP (P_the _the) (NNS _cars))) (P_. _.)),good,causative,121,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.985029231616373,-4.4952427291332935,FALSE
Name fell the cars .,Name fell the cars .,-22.47621364566647,-4.4952427291332935,(ROOT (P_Name _Name) (VP (VBD _fell) (NP (P_the _the) (NNS _cars))) (P_. _.)),bad,causative,121,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.985029231616373,-4.4952427291332935,FALSE
Name rolled the cars .,Name rolled the cars .,-24.85570182793477,-4.971140365586954,(ROOT (NP _Name) (VBD _rolled) (NP (P_the _the) (NNS _cars)) (. _.)),good,causative,121,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.971140365586954,-4.407456152494119,FALSE
Name fell the cars .,Name fell the cars .,-22.037280762470594,-4.407456152494119,(ROOT (NP _Name) (VBD _fell) (NP (P_the _the) (NNS _cars)) (. _.)),bad,causative,121,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.971140365586954,-4.407456152494119,FALSE
Name rolled the cars .,Name rolled the cars .,-25.7718915544647,-5.154378310892939,(ROOT (NNP _Name) (VP (VBD _rolled) (NP (P_the _the) (NNS _cars))) (. _.)),good,causative,121,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.154378310892939,-4.643829456047218,FALSE
Name fell the cars .,Name fell the cars .,-23.21914728023609,-4.643829456047218,(ROOT (NNP _Name) (VP (VBD _fell) (NP (P_the _the) (NNS _cars))) (. _.)),bad,causative,121,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.154378310892939,-4.643829456047218,FALSE
Name rolled the cars .,Name rolled the cars .,-25.22170419246579,-5.044340838493158,(ROOT (P_Name _Name) (VP (VBD _rolled) (NP (P_the _the) (NNS _cars))) (P_. _.)),good,causative,121,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.044340838493158,-4.594564655687149,FALSE
Name fell the cars .,Name fell the cars .,-22.972823278435744,-4.594564655687149,(ROOT (P_Name _Name) (VP (VBD _fell) (NP (P_the _the) (NNS _cars))) (P_. _.)),bad,causative,121,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.044340838493158,-4.594564655687149,FALSE
Name rolled the cars .,Name rolled the cars .,-25.30547154579197,-5.061094309158394,(ROOT (P_Name _Name) (VP (VBN _rolled) (NP (P_the _the) (NNS _cars))) (. _.)),good,causative,121,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.061094309158394,-4.460929044343066,FALSE
Name fell the cars .,Name fell the cars .,-22.30464522171533,-4.460929044343066,(ROOT (P_Name _Name) (VP (VBD _fell) (NP (P_the _the) (NNS _cars))) (. _.)),bad,causative,121,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.061094309158394,-4.460929044343066,FALSE
Name would n't waste away every box .,Name would n't waste away every box .,-45.588353624794806,-5.698544203099351,(ROOT (P_Name _Name) (VP (P_would _would) (NOT _n't) (VP (VB _waste) (PRT _away) (NP (DT _every) (NN _box)))) (P_. _.)),bad,causative,171,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.991152585778703,-5.698544203099351,TRUE
Name would n't open every box .,Name would n't open every box .,-34.93806810045092,-4.991152585778703,(ROOT (P_Name _Name) (VP (P_would _would) (NOT _n't) (VP (VB _open) (DT _every) (NN _box))) (P_. _.)),good,causative,171,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.991152585778703,-5.698544203099351,TRUE
Name would n't waste away every box .,Name would n't waste away every box .,-43.652240180527066,-5.456530022565883,(ROOT (NNP _Name) (VP (MD _would) (NOT _n't) (VP (VB _waste) (RP _away) (NP (DT _every) (P_box _box)))) (. _.)),bad,causative,171,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.644732029761789,-5.456530022565883,TRUE
Name would n't open every box .,Name would n't open every box .,-32.51312420833252,-4.644732029761789,(ROOT (NNP _Name) (VP (MD _would) (P_n't _n't) (VB _open) (NP (DT _every) (P_box _box))) (. _.)),good,causative,171,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.644732029761789,-5.456530022565883,TRUE
Name would n't waste away every box .,Name would n't waste away every box .,-45.315802289046864,-5.664475286130858,(ROOT (P_Name _Name) (VP (MD _would) (P_n't _n't) (VP (VB _waste) (PRT _away) (NP (DT _every) (P_box _box)))) (P_. _.)),bad,causative,171,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.718662437673983,-5.664475286130858,TRUE
Name would n't open every box .,Name would n't open every box .,-33.030637063717876,-4.718662437673983,(ROOT (P_Name _Name) (VP (MD _would) (NOT _n't) (VB _open) (NP (DT _every) (P_box _box))) (P_. _.)),good,causative,171,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.718662437673983,-5.664475286130858,TRUE
Name would n't waste away every box .,Name would n't waste away every box .,-43.84930874949143,-5.4811635936864285,(ROOT (NNP _Name) (VP (MD _would) (NOT _n't) (VP (VB _waste) (PRT _away) (NP (DT _every) (P_box _box)))) (P_. _.)),bad,causative,171,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.5980493234300654,-5.4811635936864285,TRUE
Name would n't open every box .,Name would n't open every box .,-32.186345264010455,-4.5980493234300654,(ROOT (NNP _Name) (VP (P_would _would) (NOT _n't) (VB _open) (NP (DT _every) (P_box _box))) (P_. _.)),good,causative,171,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.5980493234300654,-5.4811635936864285,TRUE
Name would n't waste away every box .,Name would n't waste away every box .,-45.19175137262097,-5.648968921577621,(ROOT (P_Name _Name) (VP (MD _would) (NOT _n't) (VB _waste) (NP (RB _away) (DT _every) (NN _box))) (. _.)),bad,causative,171,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.833657446734987,-5.648968921577621,TRUE
Name would n't open every box .,Name would n't open every box .,-33.83560212714491,-4.833657446734987,(ROOT (P_Name _Name) (VP (MD _would) (NOT _n't) (VB _open) (NP (DT _every) (NN _box))) (. _.)),good,causative,171,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.833657446734987,-5.648968921577621,TRUE
Name would n't waste away every box .,Name would n't waste away every box .,-46.32199097412586,-5.7902488717657326,(ROOT (P_Name _Name) (VP (P_would _would) (NOT _n't) (VP (VB _waste) (PRT _away) (NP (DT _every) (NN _box)))) (P_. _.)),bad,causative,171,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.381757786104691,-5.7902488717657326,TRUE
Name would n't open every box .,Name would n't open every box .,-37.672304502732835,-5.381757786104691,(ROOT (P_Name _Name) (VP (P_would _would) (NOT _n't) (VP (VB _open) (NP (DT _every) (NN _box)))) (P_. _.)),good,causative,171,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.381757786104691,-5.7902488717657326,TRUE
Name would n't waste away every box .,Name would n't waste away every box .,-44.994261820533374,-5.624282727566672,(ROOT (NNP _Name) (VP (P_would _would) (P_n't _n't) (VP (VB _waste) (RP _away) (NP (DT _every) (NN _box)))) (P_. _.)),bad,causative,171,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.781944566702426,-5.624282727566672,TRUE
Name would n't open every box .,Name would n't open every box .,-33.47361196691698,-4.781944566702426,(ROOT (NNP _Name) (VP (P_would _would) (P_n't _n't) (VP (VB _open) (DT _every) (NN _box))) (P_. _.)),good,causative,171,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.781944566702426,-5.624282727566672,TRUE
Name would n't waste away every box .,Name would n't waste away every box .,-46.074413199922866,-5.759301649990358,(ROOT (NNP _Name) (VP (MD _would) (P_n't _n't) (VP (VB _waste) (PRT _away) (NP (DT _every) (NN _box)))) (. _.)),bad,causative,171,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.800731172104632,-5.759301649990358,TRUE
Name would n't open every box .,Name would n't open every box .,-33.60511820473242,-4.800731172104632,(ROOT (NNP _Name) (VP (MD _would) (P_n't _n't) (VP (VB _open) (DT _every) (NN _box))) (. _.)),good,causative,171,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.800731172104632,-5.759301649990358,TRUE
Name would n't waste away every box .,Name would n't waste away every box .,-43.84347293890398,-5.480434117362997,(ROOT (NP _Name) (MD _would) (P_n't _n't) (VP (VB _waste) (RB _away) (DT _every) (NN _box)) (P_. _.)),bad,causative,171,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.994208635782576,-5.480434117362997,TRUE
Name would n't open every box .,Name would n't open every box .,-34.959460450478026,-4.994208635782576,(ROOT (NP _Name) (MD _would) (P_n't _n't) (VP (VB _open) (DT _every) (NN _box)) (P_. _.)),good,causative,171,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.994208635782576,-5.480434117362997,TRUE
Name would n't waste away every box .,Name would n't waste away every box .,-44.57147094498482,-5.571433868123102,(ROOT (P_Name _Name) (VP (MD _would) (P_n't _n't) (VB _waste) (NP (RB _away) (DT _every) (NN _box))) (. _.)),bad,causative,171,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.907411984403768,-5.571433868123102,TRUE
Name would n't open every box .,Name would n't open every box .,-34.35188389082638,-4.907411984403768,(ROOT (P_Name _Name) (VP (MD _would) (P_n't _n't) (VB _open) (NP (DT _every) (NN _box))) (. _.)),good,causative,171,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.907411984403768,-5.571433868123102,TRUE
Name could sneeze Name .,Name could sneeze Name .,-22.582516555601718,-4.516503311120344,(ROOT (P_Name _Name) (VP (P_could _could) (VB _sneeze) (NP _Name)) (P_. _.)),bad,causative,173,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.374398718777332,-4.516503311120344,TRUE
Name could stand up Name .,Name could stand up Name .,-26.246392312663993,-4.374398718777332,(ROOT (NNP _Name) (VP (MD _could) (VP (P_stand _stand) (P_up _up))) (NP _Name) (. _.)),good,causative,173,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.374398718777332,-4.516503311120344,TRUE
Name could sneeze Name .,Name could sneeze Name .,-24.738482534337944,-4.947696506867588,(ROOT (NNP _Name) (VP (MD _could) (VB _sneeze) (NP _Name)) (. _.)),bad,causative,173,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.6384011931821965,-4.947696506867588,TRUE
Name could stand up Name .,Name could stand up Name .,-27.83040715909318,-4.6384011931821965,(ROOT (S (NP _Name) (VP (P_could _could) (VP (P_stand _stand) (P_up _up)))) (P_Name _Name) (P_. _.)),good,causative,173,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.6384011931821965,-4.947696506867588,TRUE
Name could sneeze Name .,Name could sneeze Name .,-27.862711762669182,-5.572542352533836,(ROOT (P_Name _Name) (VP (MD _could) (VP (VBP _sneeze) (NP _Name))) (P_. _.)),bad,causative,173,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.784133836211777,-5.572542352533836,TRUE
Name could stand up Name .,Name could stand up Name .,-28.70480301727066,-4.784133836211777,(ROOT (NP _Name) (VP (MD _could) (VP (P_stand _stand) (P_up _up))) (NP _Name) (P_. _.)),good,causative,173,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.784133836211777,-5.572542352533836,TRUE
Name could sneeze Name .,Name could sneeze Name .,-26.03623734759733,-5.207247469519466,(ROOT (NNP _Name) (VP (P_could _could) (VP (VBP _sneeze) (NP _Name))) (P_. _.)),bad,causative,173,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.259502406076916,-5.207247469519466,TRUE
Name could stand up Name .,Name could stand up Name .,-25.5570144364615,-4.259502406076916,(ROOT (P_Name _Name) (VP (P_could _could) (VP (P_stand _stand) (P_up _up))) (NP _Name) (. _.)),good,causative,173,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.259502406076916,-5.207247469519466,TRUE
Name could sneeze Name .,Name could sneeze Name .,-27.119188307286116,-5.423837661457223,(ROOT (P_Name _Name) (VP (MD _could) (VP (VBP _sneeze) (NP _Name))) (. _.)),bad,causative,173,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.737708089510918,-5.423837661457223,TRUE
Name could stand up Name .,Name could stand up Name .,-28.42624853706551,-4.737708089510918,(ROOT (P_Name _Name) (VP (MD _could) (VP (P_stand _stand) (PP (IN _up) (P_Name _Name)))) (. _.)),good,causative,173,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.737708089510918,-5.423837661457223,TRUE
Name could sneeze Name .,Name could sneeze Name .,-24.529216420548128,-4.905843284109626,(ROOT (P_Name _Name) (VP (MD _could) (VB _sneeze) (NP _Name)) (P_. _.)),bad,causative,173,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.669073020145434,-4.905843284109626,TRUE
Name could stand up Name .,Name could stand up Name .,-28.014438120872605,-4.669073020145434,(ROOT (P_Name _Name) (VP (MD _could) (VP (VB _stand) (PRT _up) (NP _Name))) (P_. _.)),good,causative,173,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.669073020145434,-4.905843284109626,TRUE
Name could sneeze Name .,Name could sneeze Name .,-26.539001811092515,-5.307800362218503,(ROOT (NNP _Name) (VP (MD _could) (VP (VBP _sneeze) (NP _Name))) (P_. _.)),bad,causative,173,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.846111946938221,-5.307800362218503,TRUE
Name could stand up Name .,Name could stand up Name .,-29.076671681629325,-4.846111946938221,(ROOT (NNP _Name) (VP (MD _could) (VP (VB _stand) (RP _up) (NP _Name))) (P_. _.)),good,causative,173,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.846111946938221,-5.307800362218503,TRUE
Name could sneeze Name .,Name could sneeze Name .,-25.709539969782913,-5.141907993956583,(ROOT (NNP _Name) (VP (MD _could) (VB _sneeze) (NP _Name)) (. _.)),bad,causative,173,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.838501271815474,-5.141907993956583,TRUE
Name could stand up Name .,Name could stand up Name .,-29.031007630892844,-4.838501271815474,(ROOT (NNP _Name) (VP (MD _could) (VP (VB _stand) (PRT _up) (NP _Name))) (. _.)),good,causative,173,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.838501271815474,-5.141907993956583,TRUE
Name could sneeze Name .,Name could sneeze Name .,-24.230589087007363,-4.846117817401472,(ROOT (P_Name _Name) (VP (MD _could) (VB _sneeze) (NP _Name)) (P_. _.)),bad,causative,173,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.819449359447256,-4.846117817401472,TRUE
Name could stand up Name .,Name could stand up Name .,-28.916696156683535,-4.819449359447256,(ROOT (P_Name _Name) (VP (MD _could) (VP (VB _stand) (P_up _up) (NP _Name))) (P_. _.)),good,causative,173,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.819449359447256,-4.846117817401472,TRUE
Name could sneeze Name .,Name could sneeze Name .,-23.45456758801313,-4.690913517602626,(ROOT (P_Name _Name) (VP (P_could _could) (VB _sneeze) (NP _Name)) (. _.)),bad,causative,173,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.530315426880555,-4.690913517602626,TRUE
Name could stand up Name .,Name could stand up Name .,-27.181892561283327,-4.530315426880555,(ROOT (P_Name _Name) (VP (P_could _could) (VP (P_stand _stand) (PP (IN _up) (P_Name _Name)))) (. _.)),good,causative,173,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.530315426880555,-4.690913517602626,TRUE
Name moves Name .,Name moves Name .,-18.9166322721399,-4.729158068034975,(ROOT (P_Name _Name) (VP (VBZ _moves) (NP _Name)) (P_. _.)),good,causative,221,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.729158068034975,-4.622834054588405,FALSE
Name got a job Name .,Name got a job Name .,-27.737004327530432,-4.622834054588405,(ROOT (P_Name _Name) (VP (P_got _got) (NP (DT _a) (NN _job) (P_Name _Name))) (P_. _.)),bad,causative,221,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.729158068034975,-4.622834054588405,FALSE
Name moves Name .,Name moves Name .,-16.110636595108744,-4.027659148777186,(ROOT (P_Name _Name) (VBZ _moves) (NP _Name) (P_. _.)),good,causative,221,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.027659148777186,-4.774110171674836,TRUE
Name got a job Name .,Name got a job Name .,-28.644661030049015,-4.774110171674836,(ROOT (NNP _Name) (VP (VBD _got) (NP (P_a _a) (NN _job)) (NP _Name)) (. _.)),bad,causative,221,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.027659148777186,-4.774110171674836,TRUE
Name moves Name .,Name moves Name .,-18.86115969382371,-4.715289923455927,(ROOT (P_Name _Name) (VP (VBZ _moves) (NP _Name)) (P_. _.)),good,causative,221,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.715289923455927,-4.978917498875792,TRUE
Name got a job Name .,Name got a job Name .,-29.873504993254752,-4.978917498875792,(ROOT (P_Name _Name) (VP (VBD _got) (NP (P_a _a) (NN _job)) (NP _Name)) (P_. _.)),bad,causative,221,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.715289923455927,-4.978917498875792,TRUE
Name moves Name .,Name moves Name .,-18.860432261169045,-4.715108065292261,(ROOT (NP _Name) (VBZ _moves) (NP _Name) (. _.)),good,causative,221,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.715108065292261,-4.711148197139748,FALSE
Name got a job Name .,Name got a job Name .,-28.266889182838487,-4.711148197139748,(ROOT (NNP _Name) (VP (P_got _got) (NP (DT _a) (NN _job) (NNP _Name))) (P_. _.)),bad,causative,221,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.715108065292261,-4.711148197139748,FALSE
Name moves Name .,Name moves Name .,-20.64948689234842,-5.162371723087105,(ROOT (P_Name _Name) (VP (VBZ _moves) (NP _Name)) (. _.)),good,causative,221,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.162371723087105,-4.952782097986453,FALSE
Name got a job Name .,Name got a job Name .,-29.716692587918715,-4.952782097986453,(ROOT (P_Name _Name) (VP (P_got _got) (NP (NP (P_a _a) (NN _job)) (P_Name _Name))) (. _.)),bad,causative,221,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.162371723087105,-4.952782097986453,FALSE
Name moves Name .,Name moves Name .,-18.138745997540695,-4.534686499385174,(ROOT (NP _Name) (VBZ _moves) (NP _Name) (P_. _.)),good,causative,221,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.534686499385174,-4.745231210225569,TRUE
Name got a job Name .,Name got a job Name .,-28.471387261353414,-4.745231210225569,(ROOT (P_Name _Name) (VP (P_got _got) (NP (DT _a) (NN _job) (NNP _Name))) (P_. _.)),bad,causative,221,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.534686499385174,-4.745231210225569,TRUE
Name moves Name .,Name moves Name .,-18.558089730518276,-4.639522432629569,(ROOT (NP _Name) (VBZ _moves) (NP _Name) (P_. _.)),good,causative,221,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.639522432629569,-4.802497453570667,TRUE
Name got a job Name .,Name got a job Name .,-28.814984721424,-4.802497453570667,(ROOT (NNP _Name) (VP (P_got _got) (NP (DT _a) (NN _job) (P_Name _Name))) (P_. _.)),bad,causative,221,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.639522432629569,-4.802497453570667,TRUE
Name moves Name .,Name moves Name .,-17.822060540050934,-4.4555151350127336,(ROOT (NP _Name) (VBZ _moves) (NP _Name) (P_. _.)),good,causative,221,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.4555151350127336,-Inf,NA
Name moves Name .,Name moves Name .,-18.367065680577138,-4.5917664201442845,(ROOT (NP _Name) (VBZ _moves) (NP _Name) (. _.)),good,causative,221,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.5917664201442845,-4.890205997625196,TRUE
Name got a job Name .,Name got a job Name .,-29.341235985751176,-4.890205997625196,(ROOT (P_Name _Name) (VP (VBD _got) (NP (P_a _a) (NN _job)) (NP _Name)) (P_. _.)),bad,causative,221,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.5917664201442845,-4.890205997625196,TRUE
Name moves Name .,Name moves Name .,-17.75697992763174,-4.439244981907935,(ROOT (NP _Name) (VBZ _moves) (NP _Name) (. _.)),good,causative,221,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.439244981907935,-Inf,NA
Name tipped over this carriage .,Name tipped over this carriage .,-33.57040629883953,-5.595067716473255,(ROOT (NP _Name) (VBD _tipped) (IN _over) (NP (P_this _this) (NN _carriage)) (. _.)),good,causative,305,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.595067716473255,-5.563520615187056,FALSE
Name falls this carriage .,Name falls this carriage .,-27.81760307593528,-5.563520615187056,(ROOT (P_Name _Name) (VP (VBZ _falls) (NP (P_this _this) (NN _carriage))) (P_. _.)),bad,causative,305,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.595067716473255,-5.563520615187056,FALSE
Name tipped over this carriage .,Name tipped over this carriage .,-31.284268984530534,-5.214044830755089,(ROOT (NNP _Name) (VP (VBD _tipped) (P_over _over) (NP (P_this _this) (NN _carriage))) (. _.)),good,causative,305,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.214044830755089,-5.192485475661368,FALSE
Name falls this carriage .,Name falls this carriage .,-25.962427378306838,-5.192485475661368,(ROOT (P_Name _Name) (VBZ _falls) (NP (P_this _this) (NN _carriage)) (P_. _.)),bad,causative,305,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.214044830755089,-5.192485475661368,FALSE
Name tipped over this carriage .,Name tipped over this carriage .,-32.12550606360847,-5.354251010601412,(ROOT (P_Name _Name) (VP (VBD _tipped) (P_over _over) (NP (P_this _this) (NN _carriage))) (P_. _.)),good,causative,305,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.354251010601412,-5.620785348630358,TRUE
Name falls this carriage .,Name falls this carriage .,-28.103926743151792,-5.620785348630358,(ROOT (NP _Name) (VBZ _falls) (PP (P_this _this) (NN _carriage)) (P_. _.)),bad,causative,305,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.354251010601412,-5.620785348630358,TRUE
Name tipped over this carriage .,Name tipped over this carriage .,-31.61529246282061,-5.269215410470101,(ROOT (NNP _Name) (VP (VBD _tipped) (P_over _over) (NP (P_this _this) (NN _carriage))) (P_. _.)),good,causative,305,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.269215410470101,-5.65101521018076,TRUE
Name falls this carriage .,Name falls this carriage .,-28.2550760509038,-5.65101521018076,(ROOT (NP _Name) (VBZ _falls) (NP (P_this _this) (NN _carriage)) (. _.)),bad,causative,305,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.269215410470101,-5.65101521018076,TRUE
Name tipped over this carriage .,Name tipped over this carriage .,-31.72024580764275,-5.286707634607125,(ROOT (P_Name _Name) (VP (VBD _tipped) (P_over _over) (NP (P_this _this) (NN _carriage))) (. _.)),good,causative,305,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.286707634607125,-5.757573834633888,TRUE
Name falls this carriage .,Name falls this carriage .,-28.78786917316944,-5.757573834633888,(ROOT (P_Name _Name) (VP (VBZ _falls) (DT _this) (NN _carriage)) (. _.)),bad,causative,305,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.286707634607125,-5.757573834633888,TRUE
Name tipped over this carriage .,Name tipped over this carriage .,-35.38531523444422,-5.897552539074037,(ROOT (P_Name _Name) (VP (VBD _tipped) (PP (P_over _over) (NP (P_this _this) (NN _carriage)))) (P_. _.)),good,causative,305,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.897552539074037,-5.732897313113949,FALSE
Name falls this carriage .,Name falls this carriage .,-28.664486565569746,-5.732897313113949,(ROOT (NP _Name) (VBZ _falls) (NP (P_this _this) (NN _carriage)) (P_. _.)),bad,causative,305,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.897552539074037,-5.732897313113949,FALSE
Name tipped over this carriage .,Name tipped over this carriage .,-31.003017409001085,-5.167169568166847,(ROOT (NNP _Name) (VP (VBD _tipped) (P_over _over) (NP (P_this _this) (NN _carriage))) (P_. _.)),good,causative,305,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.167169568166847,-5.379052761613004,TRUE
Name falls this carriage .,Name falls this carriage .,-26.895263808065017,-5.379052761613004,(ROOT (NP _Name) (VBZ _falls) (NP (P_this _this) (NN _carriage)) (P_. _.)),bad,causative,305,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.167169568166847,-5.379052761613004,TRUE
Name tipped over this carriage .,Name tipped over this carriage .,-33.95333242705707,-5.658888737842845,(ROOT (NNP _Name) (VP (VBD _tipped) (PP (IN _over) (P_this _this) (NN _carriage))) (. _.)),good,causative,305,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.658888737842845,-5.695585063287558,TRUE
Name falls this carriage .,Name falls this carriage .,-28.47792531643779,-5.695585063287558,(ROOT (NP _Name) (VBZ _falls) (NP (P_this _this) (NN _carriage)) (P_. _.)),bad,causative,305,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.658888737842845,-5.695585063287558,TRUE
Name tipped over this carriage .,Name tipped over this carriage .,-34.50738423673251,-5.751230706122086,(ROOT (P_Name _Name) (VP (VBD _tipped) (RP _over) (NP (P_this _this) (NN _carriage))) (P_. _.)),good,causative,305,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.751230706122086,-5.625495869917658,FALSE
Name falls this carriage .,Name falls this carriage .,-28.127479349588288,-5.625495869917658,(ROOT (NP _Name) (VBZ _falls) (NP (P_this _this) (NN _carriage)) (. _.)),bad,causative,305,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.751230706122086,-5.625495869917658,FALSE
Name tipped over this carriage .,Name tipped over this carriage .,-34.66755125134943,-5.777925208558238,(ROOT (P_Name _Name) (VP (VBD _tipped) (RP _over) (PP (P_this _this) (NN _carriage))) (. _.)),good,causative,305,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.777925208558238,-5.619777519748114,FALSE
Name falls this carriage .,Name falls this carriage .,-28.098887598740568,-5.619777519748114,(ROOT (NP _Name) (VBZ _falls) (NP (P_this _this) (NN _carriage)) (. _.)),bad,causative,305,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.777925208558238,-5.619777519748114,FALSE
Name was rolling that bicycle .,Name was rolling that bicycle .,-34.33974505674059,-5.723290842790099,(ROOT (P_Name _Name) (VP (AUX _was) (VBG _rolling) (NP (P_that _that) (NN _bicycle))) (P_. _.)),good,causative,378,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.723290842790099,-5.775609059114267,TRUE
Name was falling that bicycle .,Name was falling that bicycle .,-34.6536543546856,-5.775609059114267,(ROOT (P_Name _Name) (VP (AUX _was) (VBG _falling) (NP (P_that _that) (NN _bicycle))) (P_. _.)),bad,causative,378,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.723290842790099,-5.775609059114267,TRUE
Name was rolling that bicycle .,Name was rolling that bicycle .,-34.97436202549962,-5.829060337583271,(ROOT (NNP _Name) (VP (P_was _was) (VP (VBG _rolling) (NP (P_that _that) (NN _bicycle)))) (. _.)),good,causative,378,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.829060337583271,-5.9982452737179495,TRUE
Name was falling that bicycle .,Name was falling that bicycle .,-35.9894716423077,-5.9982452737179495,(ROOT (NNP _Name) (VP (P_was _was) (VP (VBG _falling) (NP (P_that _that) (NN _bicycle)))) (. _.)),bad,causative,378,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.829060337583271,-5.9982452737179495,TRUE
Name was rolling that bicycle .,Name was rolling that bicycle .,-34.36689843329655,-5.727816405549425,(ROOT (P_Name _Name) (VP (P_was _was) (VP (VBG _rolling) (DT _that) (NN _bicycle))) (P_. _.)),good,causative,378,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.727816405549425,-5.775698905657758,TRUE
Name was falling that bicycle .,Name was falling that bicycle .,-34.654193433946546,-5.775698905657758,(ROOT (P_Name _Name) (VP (P_was _was) (VP (VBG _falling) (DT _that) (NN _bicycle))) (P_. _.)),bad,causative,378,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.727816405549425,-5.775698905657758,TRUE
Name was rolling that bicycle .,Name was rolling that bicycle .,-33.986097118056854,-5.664349519676143,(ROOT (NNP _Name) (VP (AUX _was) (VBG _rolling) (NP (P_that _that) (NN _bicycle))) (P_. _.)),good,causative,378,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.664349519676143,-5.596908557722809,FALSE
Name was falling that bicycle .,Name was falling that bicycle .,-33.581451346336856,-5.596908557722809,(ROOT (NNP _Name) (VP (AUX _was) (VBG _falling) (NP (P_that _that) (NN _bicycle))) (P_. _.)),bad,causative,378,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.664349519676143,-5.596908557722809,FALSE
Name was rolling that bicycle .,Name was rolling that bicycle .,-32.71279653480122,-5.452132755800204,(ROOT (P_Name _Name) (VP (P_was _was) (VBG _rolling) (NP (P_that _that) (NN _bicycle))) (. _.)),good,causative,378,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.452132755800204,-5.18624981164252,FALSE
Name was falling that bicycle .,Name was falling that bicycle .,-31.11749886985512,-5.18624981164252,(ROOT (P_Name _Name) (VP (P_was _was) (VBG _falling) (NP (P_that _that) (NN _bicycle))) (. _.)),bad,causative,378,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.452132755800204,-5.18624981164252,FALSE
Name was rolling that bicycle .,Name was rolling that bicycle .,-32.14645373990215,-5.357742289983691,(ROOT (P_Name _Name) (VP (AUX _was) (VBG _rolling) (NP (P_that _that) (NN _bicycle))) (P_. _.)),good,causative,378,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.357742289983691,-5.320594493493692,FALSE
Name was falling that bicycle .,Name was falling that bicycle .,-31.92356696096215,-5.320594493493692,(ROOT (P_Name _Name) (VP (AUX _was) (VBG _falling) (NP (P_that _that) (NN _bicycle))) (P_. _.)),bad,causative,378,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.357742289983691,-5.320594493493692,FALSE
Name was rolling that bicycle .,Name was rolling that bicycle .,-35.61080191314267,-5.935133652190445,(ROOT (NP _Name) (P_was _was) (VP (VBG _rolling) (NP (P_that _that) (NN _bicycle))) (P_. _.)),good,causative,378,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.935133652190445,-5.708850725688303,FALSE
Name was falling that bicycle .,Name was falling that bicycle .,-34.25310435412982,-5.708850725688303,(ROOT (NP _Name) (P_was _was) (VP (VBG _falling) (NP (P_that _that) (NN _bicycle))) (P_. _.)),bad,causative,378,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.935133652190445,-5.708850725688303,FALSE
Name was rolling that bicycle .,Name was rolling that bicycle .,-32.047680921273916,-5.341280153545653,(ROOT (NNP _Name) (VP (P_was _was) (VBG _rolling) (NP (P_that _that) (NN _bicycle))) (. _.)),good,causative,378,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.341280153545653,-5.408719759543987,TRUE
Name was falling that bicycle .,Name was falling that bicycle .,-32.45231855726392,-5.408719759543987,(ROOT (NNP _Name) (VP (P_was _was) (VBG _falling) (NP (P_that _that) (NN _bicycle))) (. _.)),bad,causative,378,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.341280153545653,-5.408719759543987,TRUE
Name was rolling that bicycle .,Name was rolling that bicycle .,-34.22674552780564,-5.704457587967607,(ROOT (P_Name _Name) (VP (AUX _was) (VBG _rolling) (NP (P_that _that) (NN _bicycle))) (P_. _.)),good,causative,378,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.704457587967607,-5.704457587967607,FALSE
Name was falling that bicycle .,Name was falling that bicycle .,-34.22674552780564,-5.704457587967607,(ROOT (P_Name _Name) (VP (AUX _was) (VBG _falling) (NP (P_that _that) (NN _bicycle))) (P_. _.)),bad,causative,378,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.704457587967607,-5.704457587967607,FALSE
Name was rolling that bicycle .,Name was rolling that bicycle .,-34.308860550322535,-5.718143425053756,(ROOT (P_Name _Name) (VP (P_was _was) (VP (VBG _rolling) (NP (P_that _that) (NN _bicycle)))) (. _.)),good,causative,378,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.718143425053756,-5.718143425053756,FALSE
Name was falling that bicycle .,Name was falling that bicycle .,-34.308860550322535,-5.718143425053756,(ROOT (P_Name _Name) (VP (P_was _was) (VP (VBG _falling) (NP (P_that _that) (NN _bicycle)))) (. _.)),bad,causative,378,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.718143425053756,-5.718143425053756,FALSE
Name was falling a car .,Name was falling a car .,-28.043740360189048,-4.673956726698175,(ROOT (P_Name _Name) (VP (AUX _was) (VBG _falling) (NP (P_a _a) (NN _car))) (P_. _.)),bad,causative,440,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.622589839691791,-4.673956726698175,TRUE
Name was rolling a car .,Name was rolling a car .,-27.735539038150748,-4.622589839691791,(ROOT (P_Name _Name) (VP (AUX _was) (VBG _rolling) (NP (P_a _a) (NN _car))) (P_. _.)),good,causative,440,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.622589839691791,-4.673956726698175,TRUE
Name was falling a car .,Name was falling a car .,-30.114511316783233,-5.019085219463872,(ROOT (NNP _Name) (VP (P_was _was) (VP (VBG _falling) (P_a _a) (NN _car))) (. _.)),bad,causative,440,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.8583285268745655,-5.019085219463872,TRUE
Name was rolling a car .,Name was rolling a car .,-29.149971161247393,-4.8583285268745655,(ROOT (NNP _Name) (VP (P_was _was) (VP (VBG _rolling) (P_a _a) (NN _car))) (. _.)),good,causative,440,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.8583285268745655,-5.019085219463872,TRUE
Name was falling a car .,Name was falling a car .,-29.137919364656362,-4.856319894109394,(ROOT (P_Name _Name) (VP (P_was _was) (VP (VBG _falling) (DT _a) (NN _car))) (P_. _.)),bad,causative,440,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.80843739400106,-4.856319894109394,TRUE
Name was rolling a car .,Name was rolling a car .,-28.85062436400636,-4.80843739400106,(ROOT (P_Name _Name) (VP (P_was _was) (VP (VBG _rolling) (DT _a) (NN _car))) (P_. _.)),good,causative,440,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.80843739400106,-4.856319894109394,TRUE
Name was falling a car .,Name was falling a car .,-27.88299768913082,-4.6471662815218044,(ROOT (NNP _Name) (VP (AUX _was) (VBG _falling) (NP (P_a _a) (NN _car))) (P_. _.)),bad,causative,440,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.714607243475137,-4.6471662815218044,FALSE
Name was rolling a car .,Name was rolling a car .,-28.287643460850823,-4.714607243475137,(ROOT (NNP _Name) (VP (AUX _was) (VBG _rolling) (NP (P_a _a) (NN _car))) (P_. _.)),good,causative,440,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.714607243475137,-4.6471662815218044,FALSE
Name was falling a car .,Name was falling a car .,-26.308176220039403,-4.384696036673234,(ROOT (P_Name _Name) (VP (P_was _was) (VBG _falling) (NP (P_a _a) (NN _car))) (. _.)),bad,causative,440,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.651604486214877,-4.384696036673234,FALSE
Name was rolling a car .,Name was rolling a car .,-27.909626917289263,-4.651604486214877,(ROOT (P_Name _Name) (VP (P_was _was) (VBG _rolling) (NP (P_a _a) (NN _car))) (. _.)),good,causative,440,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.651604486214877,-4.384696036673234,FALSE
Name was falling a car .,Name was falling a car .,-27.024861859441405,-4.504143643240234,(ROOT (P_Name _Name) (VP (AUX _was) (VBG _falling) (NP (P_a _a) (NN _car))) (P_. _.)),bad,causative,440,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.541291439730234,-4.504143643240234,FALSE
Name was rolling a car .,Name was rolling a car .,-27.247748638381402,-4.541291439730234,(ROOT (P_Name _Name) (VP (AUX _was) (VBG _rolling) (NP (P_a _a) (NN _car))) (P_. _.)),good,causative,440,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.541291439730234,-4.504143643240234,FALSE
Name was falling a car .,Name was falling a car .,-28.46960169548592,-4.74493361591432,(ROOT (NP _Name) (P_was _was) (VP (VBG _falling) (DT _a) (NN _car)) (P_. _.)),bad,causative,440,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.970967656821739,-4.74493361591432,FALSE
Name was rolling a car .,Name was rolling a car .,-29.825805940930437,-4.970967656821739,(ROOT (NP _Name) (P_was _was) (VP (VBG _rolling) (DT _a) (NN _car)) (P_. _.)),good,causative,440,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.970967656821739,-4.74493361591432,FALSE
Name was falling a car .,Name was falling a car .,-27.108468510669567,-4.518078085111594,(ROOT (NNP _Name) (VP (P_was _was) (VBG _falling) (NP (P_a _a) (NN _car))) (. _.)),bad,causative,440,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.450638479113262,-4.518078085111594,TRUE
Name was rolling a car .,Name was rolling a car .,-26.703830874679568,-4.450638479113262,(ROOT (NNP _Name) (VP (P_was _was) (VBG _rolling) (NP (P_a _a) (NN _car))) (. _.)),good,causative,440,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.450638479113262,-4.518078085111594,TRUE
Name was falling a car .,Name was falling a car .,-28.135735847364433,-4.6892893078940725,(ROOT (P_Name _Name) (VP (P_was _was) (VP (VBG _falling) (P_a _a) (NN _car))) (P_. _.)),bad,causative,440,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.6892893078940725,-4.6892893078940725,FALSE
Name was rolling a car .,Name was rolling a car .,-28.135735847364433,-4.6892893078940725,(ROOT (P_Name _Name) (VP (P_was _was) (VP (VBG _rolling) (P_a _a) (NN _car))) (P_. _.)),good,causative,440,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.6892893078940725,-4.6892893078940725,FALSE
Name was falling a car .,Name was falling a car .,-28.07482331162898,-4.67913721860483,(ROOT (P_Name _Name) (VP (P_was _was) (VP (VBG _falling) (P_a _a) (NN _car))) (. _.)),bad,causative,440,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.67913721860483,-4.67913721860483,FALSE
Name was rolling a car .,Name was rolling a car .,-28.07482331162898,-4.67913721860483,(ROOT (P_Name _Name) (VP (P_was _was) (VP (VBG _rolling) (P_a _a) (NN _car))) (. _.)),good,causative,440,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.67913721860483,-4.67913721860483,FALSE
Name can n't fall apart these forks .,Name can n't fall apart these forks .,-41.52662806005627,-5.1908285075070335,(ROOT (P_Name _Name) (VP (P_can _can) (P_n't _n't) (VP (VB _fall) (PRT _apart) (NP (P_these _these) (NNS _forks)))) (P_. _.)),bad,causative,459,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.416362624796401,-5.1908285075070335,TRUE
Name can n't break these forks .,Name can n't break these forks .,-30.914538373574807,-4.416362624796401,(ROOT (P_Name _Name) (VP (P_can _can) (NOT _n't) (VB _break) (NP (P_these _these) (NNS _forks))) (P_. _.)),good,causative,459,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.416362624796401,-5.1908285075070335,TRUE
Name can n't fall apart these forks .,Name can n't fall apart these forks .,-41.02269512769112,-5.12783689096139,(ROOT (NP _Name) (P_can _can) (NOT _n't) (VP (VB _fall) (RP _apart) (NP (P_these _these) (NNS _forks))) (. _.)),bad,causative,459,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.305416319116153,-5.12783689096139,TRUE
Name can n't break these forks .,Name can n't break these forks .,-30.13791423381307,-4.305416319116153,(ROOT (NNP _Name) (VP (MD _can) (P_n't _n't) (VB _break) (NP (P_these _these) (NNS _forks))) (. _.)),good,causative,459,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.305416319116153,-5.12783689096139,TRUE
Name can n't fall apart these forks .,Name can n't fall apart these forks .,-43.3682364096945,-5.421029551211812,(ROOT (P_Name _Name) (VP (P_can _can) (P_n't _n't) (VP (VB _fall) (PRT _apart) (NP (P_these _these) (NNS _forks)))) (P_. _.)),bad,causative,459,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.679002240067738,-5.421029551211812,TRUE
Name can n't break these forks .,Name can n't break these forks .,-32.753015680474164,-4.679002240067738,(ROOT (P_Name _Name) (VP (MD _can) (NOT _n't) (VB _break) (NP (P_these _these) (NNS _forks))) (P_. _.)),good,causative,459,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.679002240067738,-5.421029551211812,TRUE
Name can n't fall apart these forks .,Name can n't fall apart these forks .,-40.66793593864685,-5.083491992330856,(ROOT (NNP _Name) (VP (MD _can) (NOT _n't) (VP (VB _fall) (PRT _apart) (NP (P_these _these) (NNS _forks)))) (P_. _.)),bad,causative,459,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.261422861615559,-5.083491992330856,TRUE
Name can n't break these forks .,Name can n't break these forks .,-29.829960031308914,-4.261422861615559,(ROOT (NNP _Name) (VP (P_can _can) (P_n't _n't) (VB _break) (NP (P_these _these) (NNS _forks))) (P_. _.)),good,causative,459,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.261422861615559,-5.083491992330856,TRUE
Name can n't fall apart these forks .,Name can n't fall apart these forks .,-42.97497911181278,-5.371872388976597,(ROOT (P_Name _Name) (VP (P_can _can) (P_n't _n't) (VP (VB _fall) (ADVP _apart) (NP (P_these _these) (NNS _forks)))) (. _.)),bad,causative,459,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.387378965147931,-5.371872388976597,TRUE
Name can n't break these forks .,Name can n't break these forks .,-30.71165275603552,-4.387378965147931,(ROOT (P_Name _Name) (VP (MD _can) (NOT _n't) (VB _break) (NP (P_these _these) (NNS _forks))) (. _.)),good,causative,459,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.387378965147931,-5.371872388976597,TRUE
Name can n't fall apart these forks .,Name can n't fall apart these forks .,-42.1374520352746,-5.267181504409325,(ROOT (P_Name _Name) (VP (P_can _can) (P_n't _n't) (VP (VB _fall) (PRT _apart) (NP (P_these _these) (NNS _forks)))) (P_. _.)),bad,causative,459,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.45137590301953,-5.267181504409325,TRUE
Name can n't break these forks .,Name can n't break these forks .,-31.159631321136708,-4.45137590301953,(ROOT (P_Name _Name) (VP (P_can _can) (P_n't _n't) (VP (P_break _break) (NP (P_these _these) (NNS _forks)))) (P_. _.)),good,causative,459,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.45137590301953,-5.267181504409325,TRUE
Name can n't fall apart these forks .,Name can n't fall apart these forks .,-39.4345074366017,-4.929313429575212,(ROOT (NNP _Name) (VP (P_can _can) (P_n't _n't) (VP (VB _fall) (RP _apart) (NP (P_these _these) (NNS _forks)))) (P_. _.)),bad,causative,459,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.315152794683159,-4.929313429575212,TRUE
Name can n't break these forks .,Name can n't break these forks .,-30.206069562782112,-4.315152794683159,(ROOT (NNP _Name) (VP (MD _can) (P_n't _n't) (VB _break) (NP (P_these _these) (NNS _forks))) (P_. _.)),good,causative,459,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.315152794683159,-4.929313429575212,TRUE
Name can n't fall apart these forks .,Name can n't fall apart these forks .,-42.78983895162247,-5.348729868952809,(ROOT (NNP _Name) (VP (MD _can) (P_n't _n't) (VP (VB _fall) (PRT _apart) (NP (P_these _these) (NNS _forks)))) (. _.)),bad,causative,459,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.426169249492456,-5.348729868952809,TRUE
Name can n't break these forks .,Name can n't break these forks .,-30.983184746447193,-4.426169249492456,(ROOT (NNP _Name) (VP (P_can _can) (P_n't _n't) (VB _break) (NP (P_these _these) (NNS _forks))) (. _.)),good,causative,459,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.426169249492456,-5.348729868952809,TRUE
Name can n't fall apart these forks .,Name can n't fall apart these forks .,-40.88399876739918,-5.110499845924897,(ROOT (NP _Name) (MD _can) (P_n't _n't) (VP (VB _fall) (PRT _apart) (NP (P_these _these) (NNS _forks))) (P_. _.)),bad,causative,459,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.2091183666325644,-5.110499845924897,TRUE
Name can n't break these forks .,Name can n't break these forks .,-29.46382856642795,-4.2091183666325644,(ROOT (P_Name _Name) (VP (P_can _can) (NOT _n't) (VB _break) (NP (P_these _these) (NNS _forks))) (P_. _.)),good,causative,459,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.2091183666325644,-5.110499845924897,TRUE
Name can n't fall apart these forks .,Name can n't fall apart these forks .,-42.99986978515469,-5.374983723144336,(ROOT (P_Name _Name) (VP (MD _can) (NOT _n't) (VP (VB _fall) (PRT _apart) (NP (P_these _these) (NNS _forks)))) (. _.)),bad,causative,459,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.3769890903404685,-5.374983723144336,TRUE
Name can n't break these forks .,Name can n't break these forks .,-30.63892363238328,-4.3769890903404685,(ROOT (P_Name _Name) (VP (MD _can) (P_n't _n't) (VB _break) (NP (P_these _these) (NNS _forks))) (. _.)),good,causative,459,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.3769890903404685,-5.374983723144336,TRUE
Name falls some wheelbarrow .,Name falls some wheelbarrow .,-28.91181948727298,-5.782363897454596,(ROOT (P_Name _Name) (VP (VBZ _falls) (NP (P_some _some) (NN _wheelbarrow))) (P_. _.)),bad,causative,461,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.130406307116937,-5.782363897454596,TRUE
Name broke some wheelbarrow .,Name broke some wheelbarrow .,-25.652031535584683,-5.130406307116937,(ROOT (P_Name _Name) (VP (P_broke _broke) (NP (P_some _some) (NN _wheelbarrow))) (P_. _.)),good,causative,461,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.130406307116937,-5.782363897454596,TRUE
Name falls some wheelbarrow .,Name falls some wheelbarrow .,-26.378958026019447,-5.27579160520389,(ROOT (P_Name _Name) (VBZ _falls) (NP (P_some _some) (NN _wheelbarrow)) (P_. _.)),bad,causative,461,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.132923564037516,-5.27579160520389,TRUE
Name broke some wheelbarrow .,Name broke some wheelbarrow .,-25.66461782018758,-5.132923564037516,(ROOT (NNP _Name) (VP (P_broke _broke) (NP (P_some _some) (NN _wheelbarrow))) (. _.)),good,causative,461,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.132923564037516,-5.27579160520389,TRUE
Name falls some wheelbarrow .,Name falls some wheelbarrow .,-32.60662966990953,-6.521325933981906,(ROOT (P_Name _Name) (VP (VBZ _falls) (NP _some) (ADJP _wheelbarrow)) (P_. _.)),bad,causative,461,syntax,argument_structure,sample2.0.FG-output.rank-1,-6.143434811959542,-6.521325933981906,TRUE
Name broke some wheelbarrow .,Name broke some wheelbarrow .,-30.717174059797713,-6.143434811959542,(ROOT (P_Name _Name) (VP (VBD _broke) (NP _some) (JJ _wheelbarrow)) (P_. _.)),good,causative,461,syntax,argument_structure,sample2.0.FG-output.rank-1,-6.143434811959542,-6.521325933981906,TRUE
Name falls some wheelbarrow .,Name falls some wheelbarrow .,-27.74650346457756,-5.549300692915512,(ROOT (NP _Name) (VBZ _falls) (NP (P_some _some) (NN _wheelbarrow)) (. _.)),bad,causative,461,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.997402062699591,-5.549300692915512,TRUE
Name broke some wheelbarrow .,Name broke some wheelbarrow .,-24.987010313497958,-4.997402062699591,(ROOT (NNP _Name) (VP (P_broke _broke) (NP (P_some _some) (NN _wheelbarrow))) (P_. _.)),good,causative,461,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.997402062699591,-5.549300692915512,TRUE
Name falls some wheelbarrow .,Name falls some wheelbarrow .,-28.978978886619444,-5.795795777323889,(ROOT (P_Name _Name) (VP (VBZ _falls) (DT _some) (NN _wheelbarrow)) (. _.)),bad,causative,461,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.395140345316067,-5.795795777323889,TRUE
Name broke some wheelbarrow .,Name broke some wheelbarrow .,-26.975701726580333,-5.395140345316067,(ROOT (NP _Name) (VBD _broke) (NP (P_some _some) (NN _wheelbarrow)) (. _.)),good,causative,461,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.395140345316067,-5.795795777323889,TRUE
Name falls some wheelbarrow .,Name falls some wheelbarrow .,-28.157474125030614,-5.631494825006123,(ROOT (NP _Name) (VBZ _falls) (NP (P_some _some) (NN _wheelbarrow)) (P_. _.)),bad,causative,461,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.115437792593104,-5.631494825006123,TRUE
Name broke some wheelbarrow .,Name broke some wheelbarrow .,-25.57718896296552,-5.115437792593104,(ROOT (P_Name _Name) (VP (P_broke _broke) (NP (P_some _some) (NN _wheelbarrow))) (P_. _.)),good,causative,461,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.115437792593104,-5.631494825006123,TRUE
Name falls some wheelbarrow .,Name falls some wheelbarrow .,-34.73708567539869,-6.947417135079737,(ROOT (NP _Name) (VBZ _falls) (NP (DT _some) (VB _wheelbarrow)) (P_. _.)),bad,causative,461,syntax,argument_structure,sample6.0.FG-output.rank-1,-6.620479294604468,-6.947417135079737,TRUE
Name broke some wheelbarrow .,Name broke some wheelbarrow .,-33.10239647302234,-6.620479294604468,(ROOT (NNP _Name) (VP (P_broke _broke) (NP (DT _some) (VB _wheelbarrow))) (P_. _.)),good,causative,461,syntax,argument_structure,sample6.0.FG-output.rank-1,-6.620479294604468,-6.947417135079737,TRUE
Name falls some wheelbarrow .,Name falls some wheelbarrow .,-31.901812116132476,-6.380362423226496,(ROOT (NP _Name) (VBZ _falls) (NP (DT _some) (JJ _wheelbarrow)) (P_. _.)),bad,causative,461,syntax,argument_structure,sample7.0.FG-output.rank-1,-6.006271938259677,-6.380362423226496,TRUE
Name broke some wheelbarrow .,Name broke some wheelbarrow .,-30.031359691298384,-6.006271938259677,(ROOT (NNP _Name) (VP (P_broke _broke) (NP (DT _some) (JJ _wheelbarrow))) (. _.)),good,causative,461,syntax,argument_structure,sample7.0.FG-output.rank-1,-6.006271938259677,-6.380362423226496,TRUE
Name falls some wheelbarrow .,Name falls some wheelbarrow .,-28.907159480276565,-5.781431896055313,(ROOT (NP _Name) (VBZ _falls) (NP (P_some _some) (NN _wheelbarrow)) (. _.)),bad,causative,461,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.268998414875905,-5.781431896055313,TRUE
Name broke some wheelbarrow .,Name broke some wheelbarrow .,-26.344992074379526,-5.268998414875905,(ROOT (P_Name _Name) (VP (P_broke _broke) (NP (P_some _some) (NN _wheelbarrow))) (P_. _.)),good,causative,461,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.268998414875905,-5.781431896055313,TRUE
Name falls some wheelbarrow .,Name falls some wheelbarrow .,-28.92186785539692,-5.784373571079383,(ROOT (NP _Name) (VBZ _falls) (NP (P_some _some) (NN _wheelbarrow)) (. _.)),bad,causative,461,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.5488060695719685,-5.784373571079383,TRUE
Name broke some wheelbarrow .,Name broke some wheelbarrow .,-27.744030347859844,-5.5488060695719685,(ROOT (P_Name _Name) (VP (VBD _broke) (NP (P_some _some) (NN _wheelbarrow))) (. _.)),good,causative,461,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.5488060695719685,-5.784373571079383,TRUE
Name might wash Name .,Name might wash Name .,-23.416100877178692,-4.683220175435738,(ROOT (P_Name _Name) (VP (P_might _might) (VP (VB _wash) (NP _Name))) (P_. _.)),good,causative,493,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.683220175435738,-4.577106327556221,FALSE
Name might sing Name .,Name might sing Name .,-22.885531637781106,-4.577106327556221,(ROOT (P_Name _Name) (VP (P_might _might) (VP (VB _sing) (NP _Name))) (P_. _.)),bad,causative,493,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.683220175435738,-4.577106327556221,FALSE
Name might wash Name .,Name might wash Name .,-23.748793462402432,-4.749758692480486,(ROOT (NNP _Name) (VP (MD _might) (VB _wash) (NP _Name)) (. _.)),good,causative,493,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.749758692480486,-4.64128429835892,FALSE
Name might sing Name .,Name might sing Name .,-23.2064214917946,-4.64128429835892,(ROOT (NNP _Name) (VP (MD _might) (VB _sing) (NP _Name)) (. _.)),bad,causative,493,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.749758692480486,-4.64128429835892,FALSE
Name might wash Name .,Name might wash Name .,-23.641944188388088,-4.728388837677618,(ROOT (P_Name _Name) (VP (MD _might) (VB _wash) (NP _Name)) (P_. _.)),good,causative,493,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.728388837677618,-4.651727645290637,FALSE
Name might sing Name .,Name might sing Name .,-23.258638226453186,-4.651727645290637,(ROOT (P_Name _Name) (VP (MD _might) (VB _sing) (NP _Name)) (P_. _.)),bad,causative,493,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.728388837677618,-4.651727645290637,FALSE
Name might wash Name .,Name might wash Name .,-22.194329207296512,-4.438865841459302,(ROOT (NNP _Name) (VP (P_might _might) (VP (P_wash _wash) (NP _Name))) (P_. _.)),good,causative,493,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.438865841459302,-4.525675519258187,TRUE
Name might sing Name .,Name might sing Name .,-22.628377596290935,-4.525675519258187,(ROOT (NNP _Name) (VP (MD _might) (VB _sing) (NP _Name)) (P_. _.)),bad,causative,493,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.438865841459302,-4.525675519258187,TRUE
Name might wash Name .,Name might wash Name .,-23.1723279134097,-4.63446558268194,(ROOT (P_Name _Name) (VP (MD _might) (VB _wash) (NP _Name)) (. _.)),good,causative,493,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.63446558268194,-4.529262690071968,FALSE
Name might sing Name .,Name might sing Name .,-22.646313450359838,-4.529262690071968,(ROOT (P_Name _Name) (VP (MD _might) (VB _sing) (NP _Name)) (. _.)),bad,causative,493,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.63446558268194,-4.529262690071968,FALSE
Name might wash Name .,Name might wash Name .,-22.053726691790576,-4.410745338358115,(ROOT (P_Name _Name) (VP (P_might _might) (VP (P_wash _wash) (NP _Name))) (P_. _.)),good,causative,493,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.410745338358115,-4.597847970906395,TRUE
Name might sing Name .,Name might sing Name .,-22.989239854531977,-4.597847970906395,(ROOT (P_Name _Name) (VP (P_might _might) (VP (VB _sing) (NP _Name))) (P_. _.)),bad,causative,493,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.410745338358115,-4.597847970906395,TRUE
Name might wash Name .,Name might wash Name .,-22.564357683232867,-4.512871536646573,(ROOT (NNP _Name) (VP (MD _might) (VB _wash) (NP _Name)) (P_. _.)),good,causative,493,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.512871536646573,-4.37946132675149,FALSE
Name might sing Name .,Name might sing Name .,-21.89730663375745,-4.37946132675149,(ROOT (NNP _Name) (VP (MD _might) (VB _sing) (NP _Name)) (P_. _.)),bad,causative,493,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.512871536646573,-4.37946132675149,FALSE
Name might wash Name .,Name might wash Name .,-24.310350036751668,-4.862070007350334,(ROOT (NNP _Name) (VP (MD _might) (VB _wash) (NP _Name)) (. _.)),good,causative,493,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.862070007350334,-4.775020843618334,FALSE
Name might sing Name .,Name might sing Name .,-23.875104218091668,-4.775020843618334,(ROOT (NNP _Name) (VP (MD _might) (VB _sing) (NP _Name)) (. _.)),bad,causative,493,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.862070007350334,-4.775020843618334,FALSE
Name might wash Name .,Name might wash Name .,-22.84436024900313,-4.5688720498006266,(ROOT (P_Name _Name) (VP (MD _might) (VB _wash) (NP _Name)) (P_. _.)),good,causative,493,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.5688720498006266,-4.510941322308104,FALSE
Name might sing Name .,Name might sing Name .,-22.554706611540517,-4.510941322308104,(ROOT (P_Name _Name) (VP (MD _might) (VB _sing) (NP _Name)) (P_. _.)),bad,causative,493,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.5688720498006266,-4.510941322308104,FALSE
Name might wash Name .,Name might wash Name .,-23.175529116677744,-4.635105823335548,(ROOT (P_Name _Name) (VP (MD _might) (VB _wash) (NP _Name)) (. _.)),good,causative,493,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.635105823335548,-4.559214888012422,FALSE
Name might sing Name .,Name might sing Name .,-22.796074440062107,-4.559214888012422,(ROOT (P_Name _Name) (VP (MD _might) (VB _sing) (NP _Name)) (. _.)),bad,causative,493,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.635105823335548,-4.559214888012422,FALSE
Name can n't bake these cakes .,Name can n't bake these cakes .,-32.81639400990851,-4.688056287129787,(ROOT (P_Name _Name) (VP (P_can _can) (NOT _n't) (VB _bake) (NP (P_these _these) (NNS _cakes))) (P_. _.)),good,causative,504,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.688056287129787,-4.332519397982915,FALSE
Name can n't fall these cakes .,Name can n't fall these cakes .,-30.327635785880403,-4.332519397982915,(ROOT (P_Name _Name) (VP (P_can _can) (NOT _n't) (VB _fall) (NP (P_these _these) (NNS _cakes))) (P_. _.)),bad,causative,504,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.688056287129787,-4.332519397982915,FALSE
Name can n't bake these cakes .,Name can n't bake these cakes .,-33.02877844356664,-4.71839692050952,(ROOT (NNP _Name) (VP (MD _can) (P_n't _n't) (VB _bake) (NP (P_these _these) (NNS _cakes))) (. _.)),good,causative,504,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.71839692050952,-4.352097345597438,FALSE
Name can n't fall these cakes .,Name can n't fall these cakes .,-30.46468141918207,-4.352097345597438,(ROOT (NNP _Name) (VP (MD _can) (P_n't _n't) (VB _fall) (NP (P_these _these) (NNS _cakes))) (. _.)),bad,causative,504,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.71839692050952,-4.352097345597438,FALSE
Name can n't bake these cakes .,Name can n't bake these cakes .,-36.477676982186416,-5.211096711740916,(ROOT (P_Name _Name) (VP (MD _can) (NOT _n't) (VB _bake) (NP (P_these _these) (NNS _cakes))) (P_. _.)),good,causative,504,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.211096711740916,-4.776198350189772,FALSE
Name can n't fall these cakes .,Name can n't fall these cakes .,-33.433388451328405,-4.776198350189772,(ROOT (P_Name _Name) (VP (MD _can) (NOT _n't) (VB _fall) (NP (P_these _these) (NNS _cakes))) (P_. _.)),bad,causative,504,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.211096711740916,-4.776198350189772,FALSE
Name can n't bake these cakes .,Name can n't bake these cakes .,-32.46012686910276,-4.637160981300394,(ROOT (NNP _Name) (VP (P_can _can) (P_n't _n't) (VB _bake) (NP (P_these _these) (NNS _cakes))) (P_. _.)),good,causative,504,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.637160981300394,-4.386764900607327,FALSE
Name can n't fall these cakes .,Name can n't fall these cakes .,-30.707354304251286,-4.386764900607327,(ROOT (NNP _Name) (VP (P_can _can) (P_n't _n't) (VB _fall) (NP (P_these _these) (NNS _cakes))) (P_. _.)),bad,causative,504,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.637160981300394,-4.386764900607327,FALSE
Name can n't bake these cakes .,Name can n't bake these cakes .,-33.71821931172936,-4.816888473104194,(ROOT (P_Name _Name) (VP (MD _can) (NOT _n't) (VB _bake) (NP (P_these _these) (NNS _cakes))) (. _.)),good,causative,504,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.816888473104194,-4.503072906248617,FALSE
Name can n't fall these cakes .,Name can n't fall these cakes .,-31.521510343740317,-4.503072906248617,(ROOT (P_Name _Name) (VP (MD _can) (NOT _n't) (VB _fall) (NP (P_these _these) (NNS _cakes))) (. _.)),bad,causative,504,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.816888473104194,-4.503072906248617,FALSE
Name can n't bake these cakes .,Name can n't bake these cakes .,-36.54742483749704,-5.221060691071005,(ROOT (P_Name _Name) (VP (P_can _can) (P_n't _n't) (VP (VB _bake) (NP (P_these _these) (NNS _cakes)))) (P_. _.)),good,causative,504,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.221060691071005,-4.82072847050957,FALSE
Name can n't fall these cakes .,Name can n't fall these cakes .,-33.74509929356699,-4.82072847050957,(ROOT (P_Name _Name) (VP (P_can _can) (P_n't _n't) (VP (VB _fall) (NP (P_these _these) (NNS _cakes)))) (P_. _.)),bad,causative,504,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.221060691071005,-4.82072847050957,FALSE
Name can n't bake these cakes .,Name can n't bake these cakes .,-34.77550676870263,-4.967929538386089,(ROOT (NNP _Name) (VP (MD _can) (P_n't _n't) (VB _bake) (NP (P_these _these) (NNS _cakes))) (P_. _.)),good,causative,504,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.967929538386089,-4.468733170702911,FALSE
Name can n't fall these cakes .,Name can n't fall these cakes .,-31.281132194920374,-4.468733170702911,(ROOT (NNP _Name) (VP (MD _can) (P_n't _n't) (VB _fall) (NP (P_these _these) (NNS _cakes))) (P_. _.)),bad,causative,504,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.967929538386089,-4.468733170702911,FALSE
Name can n't bake these cakes .,Name can n't bake these cakes .,-33.4787643884567,-4.782680626922386,(ROOT (NNP _Name) (VP (P_can _can) (P_n't _n't) (VB _bake) (NP (P_these _these) (NNS _cakes))) (. _.)),good,causative,504,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.782680626922386,-4.4446122347170585,FALSE
Name can n't fall these cakes .,Name can n't fall these cakes .,-31.11228564301941,-4.4446122347170585,(ROOT (NNP _Name) (VP (P_can _can) (P_n't _n't) (VB _fall) (NP (P_these _these) (NNS _cakes))) (. _.)),bad,causative,504,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.782680626922386,-4.4446122347170585,FALSE
Name can n't bake these cakes .,Name can n't bake these cakes .,-33.63474420497989,-4.80496345785427,(ROOT (P_Name _Name) (VP (P_can _can) (NOT _n't) (VB _bake) (NP (P_these _these) (NNS _cakes))) (P_. _.)),good,causative,504,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.80496345785427,-4.4501061633704575,FALSE
Name can n't fall these cakes .,Name can n't fall these cakes .,-31.150743143593203,-4.4501061633704575,(ROOT (P_Name _Name) (VP (P_can _can) (NOT _n't) (VB _fall) (NP (P_these _these) (NNS _cakes))) (P_. _.)),bad,causative,504,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.80496345785427,-4.4501061633704575,FALSE
Name can n't bake these cakes .,Name can n't bake these cakes .,-33.25397444451218,-4.750567777787454,(ROOT (P_Name _Name) (VP (MD _can) (P_n't _n't) (VB _bake) (NP (P_these _these) (NNS _cakes))) (. _.)),good,causative,504,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.750567777787454,-4.45956362701939,FALSE
Name can n't fall these cakes .,Name can n't fall these cakes .,-31.216945389135734,-4.45956362701939,(ROOT (P_Name _Name) (VP (MD _can) (P_n't _n't) (VB _fall) (NP (P_these _these) (NNS _cakes))) (. _.)),bad,causative,504,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.750567777787454,-4.45956362701939,FALSE
Name could fall apart a wheelbarrow .,Name could fall apart a wheelbarrow .,-39.43896505062691,-5.6341378643752735,(ROOT (P_Name _Name) (VP (MD _could) (VP (VB _fall) (PRT _apart) (NP (P_a _a) (NN _wheelbarrow)))) (P_. _.)),bad,causative,538,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.598885491678778,-5.6341378643752735,TRUE
Name could tip over a wheelbarrow .,Name could tip over a wheelbarrow .,-39.192198441751444,-5.598885491678778,(ROOT (P_Name _Name) (VP (MD _could) (VB _tip) (PP (IN _over) (P_a _a) (NN _wheelbarrow))) (P_. _.)),good,causative,538,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.598885491678778,-5.6341378643752735,TRUE
Name could fall apart a wheelbarrow .,Name could fall apart a wheelbarrow .,-39.18962009448588,-5.598517156355126,(ROOT (NNP _Name) (VP (P_could _could) (VP (VB _fall) (RP _apart) (NP (P_a _a) (NN _wheelbarrow)))) (. _.)),bad,causative,538,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.684101431600156,-5.598517156355126,FALSE
Name could tip over a wheelbarrow .,Name could tip over a wheelbarrow .,-39.78871002120109,-5.684101431600156,(ROOT (NNP _Name) (VP (P_could _could) (VP (VB _tip) (RP _over) (NP (P_a _a) (NN _wheelbarrow)))) (. _.)),good,causative,538,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.684101431600156,-5.598517156355126,FALSE
Name could fall apart a wheelbarrow .,Name could fall apart a wheelbarrow .,-45.8986541106793,-6.556950587239901,(ROOT (P_Name _Name) (VP (MD _could) (VP (VB _fall) (PRT _apart) (NP (DT _a) (JJ _wheelbarrow)))) (P_. _.)),bad,causative,538,syntax,argument_structure,sample2.0.FG-output.rank-1,-6.618674264410783,-6.556950587239901,FALSE
Name could tip over a wheelbarrow .,Name could tip over a wheelbarrow .,-46.33071985087548,-6.618674264410783,(ROOT (P_Name _Name) (VP (MD _could) (VP (VB _tip) (PRT _over) (NP (DT _a) (JJ _wheelbarrow)))) (P_. _.)),good,causative,538,syntax,argument_structure,sample2.0.FG-output.rank-1,-6.618674264410783,-6.556950587239901,FALSE
Name could fall apart a wheelbarrow .,Name could fall apart a wheelbarrow .,-38.0241234304256,-5.432017632917942,(ROOT (NNP _Name) (VP (P_could _could) (VP (VB _fall) (PRT _apart) (NP (P_a _a) (NN _wheelbarrow)))) (P_. _.)),bad,causative,538,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.258183352046824,-5.432017632917942,TRUE
Name could tip over a wheelbarrow .,Name could tip over a wheelbarrow .,-36.80728346432777,-5.258183352046824,(ROOT (NNP _Name) (VP (P_could _could) (VB _tip) (IN _over) (NP (P_a _a) (NN _wheelbarrow))) (P_. _.)),good,causative,538,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.258183352046824,-5.432017632917942,TRUE
Name could fall apart a wheelbarrow .,Name could fall apart a wheelbarrow .,-40.927945096518435,-5.846849299502634,(ROOT (P_Name _Name) (VP (MD _could) (VB _fall) (NP (RB _apart) (DT _a) (NN _wheelbarrow))) (. _.)),bad,causative,538,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.641689940837154,-5.846849299502634,TRUE
Name could tip over a wheelbarrow .,Name could tip over a wheelbarrow .,-39.49182958586008,-5.641689940837154,(ROOT (P_Name _Name) (VP (MD _could) (VB _tip) (PP (IN _over) (DT _a) (NN _wheelbarrow))) (. _.)),good,causative,538,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.641689940837154,-5.846849299502634,TRUE
Name could fall apart a wheelbarrow .,Name could fall apart a wheelbarrow .,-39.979485885553444,-5.711355126507635,(ROOT (P_Name _Name) (VP (MD _could) (VP (VB _fall) (PRT _apart) (NP (P_a _a) (NN _wheelbarrow)))) (P_. _.)),bad,causative,538,syntax,argument_structure,sample5.0.FG-output.rank-1,-6.572445119266574,-5.711355126507635,FALSE
Name could tip over a wheelbarrow .,Name could tip over a wheelbarrow .,-46.00711583486601,-6.572445119266574,(ROOT (P_Name _Name) (VP (MD _could) (NP (NN _tip) (PP (P_over _over) (NP (P_a _a) (NN _wheelbarrow))))) (P_. _.)),good,causative,538,syntax,argument_structure,sample5.0.FG-output.rank-1,-6.572445119266574,-5.711355126507635,FALSE
Name could fall apart a wheelbarrow .,Name could fall apart a wheelbarrow .,-46.39125773046855,-6.627322532924079,(ROOT (NNP _Name) (VP (MD _could) (VP (VB _fall) (RP _apart) (NP (DT _a) (VB _wheelbarrow)))) (P_. _.)),bad,causative,538,syntax,argument_structure,sample6.0.FG-output.rank-1,-6.858965948667766,-6.627322532924079,FALSE
Name could tip over a wheelbarrow .,Name could tip over a wheelbarrow .,-48.01276164067436,-6.858965948667766,(ROOT (NNP _Name) (VP (MD _could) (VP (VB _tip) (RP _over) (NP (DT _a) (VB _wheelbarrow)))) (P_. _.)),good,causative,538,syntax,argument_structure,sample6.0.FG-output.rank-1,-6.858965948667766,-6.627322532924079,FALSE
Name could fall apart a wheelbarrow .,Name could fall apart a wheelbarrow .,-45.09092033649127,-6.441560048070182,(ROOT (NNP _Name) (VP (MD _could) (VP (VB _fall) (PRT _apart) (NP (DT _a) (JJ _wheelbarrow)))) (. _.)),bad,causative,538,syntax,argument_structure,sample7.0.FG-output.rank-1,-6.224548349925493,-6.441560048070182,TRUE
Name could tip over a wheelbarrow .,Name could tip over a wheelbarrow .,-43.571838449478456,-6.224548349925493,(ROOT (NNP _Name) (VP (MD _could) (VP (VB _tip) (P_over _over) (NP (DT _a) (JJ _wheelbarrow)))) (. _.)),good,causative,538,syntax,argument_structure,sample7.0.FG-output.rank-1,-6.224548349925493,-6.441560048070182,TRUE
Name could fall apart a wheelbarrow .,Name could fall apart a wheelbarrow .,-41.2216520176205,-5.888807431088643,(ROOT (P_Name _Name) (VP (MD _could) (VP (VB _fall) (PRT _apart) (NP (P_a _a) (NN _wheelbarrow)))) (P_. _.)),bad,causative,538,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.682412437977198,-5.888807431088643,TRUE
Name could tip over a wheelbarrow .,Name could tip over a wheelbarrow .,-39.776887065840384,-5.682412437977198,(ROOT (P_Name _Name) (VP (MD _could) (VB _tip) (PP (IN _over) (DT _a) (NN _wheelbarrow))) (P_. _.)),good,causative,538,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.682412437977198,-5.888807431088643,TRUE
Name could fall apart a wheelbarrow .,Name could fall apart a wheelbarrow .,-39.10211445034749,-5.586016350049642,(ROOT (P_Name _Name) (VP (P_could _could) (VP (VB _fall) (PRT _apart) (NP (P_a _a) (NN _wheelbarrow)))) (. _.)),bad,causative,538,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.454956938945429,-5.586016350049642,TRUE
Name could tip over a wheelbarrow .,Name could tip over a wheelbarrow .,-38.184698572618004,-5.454956938945429,(ROOT (P_Name _Name) (VP (MD _could) (VB _tip) (IN _over) (NP (P_a _a) (NN _wheelbarrow))) (. _.)),good,causative,538,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.454956938945429,-5.586016350049642,TRUE
Name had n't disappeared a lot of forks .,Name had n't disappeared a lot of forks .,-49.266200880120905,-5.474022320013434,(ROOT (P_Name _Name) (VP (AUX _had) (NOT _n't) (VP (VBD _disappeared) (NP (DT _a) (P_lot _lot) (PP (P_of _of) (NNS _forks))))) (P_. _.)),bad,causative,591,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.599606457768182,-5.474022320013434,FALSE
Name had n't cracked a lot of forks .,Name had n't cracked a lot of forks .,-50.39645811991364,-5.599606457768182,(ROOT (P_Name _Name) (VP (AUX _had) (NOT _n't) (VP (VBN _cracked) (NP (DT _a) (P_lot _lot) (PP (P_of _of) (NNS _forks))))) (P_. _.)),good,causative,591,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.599606457768182,-5.474022320013434,FALSE
Name had n't disappeared a lot of forks .,Name had n't disappeared a lot of forks .,-47.77982172122095,-5.308869080135661,(ROOT (NP _Name) (AUX _had) (P_n't _n't) (VP (VBD _disappeared) (DT _a) (NN _lot) (PP (P_of _of) (NNS _forks))) (P_. _.)),bad,causative,591,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.577469110864056,-5.308869080135661,FALSE
Name had n't cracked a lot of forks .,Name had n't cracked a lot of forks .,-50.1972219977765,-5.577469110864056,(ROOT (NP _Name) (AUX _had) (P_n't _n't) (VP (VBN _cracked) (NP (P_a _a) (NN _lot)) (PP (P_of _of) (NNS _forks))) (P_. _.)),good,causative,591,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.577469110864056,-5.308869080135661,FALSE
Name had n't disappeared a lot of forks .,Name had n't disappeared a lot of forks .,-49.43080561455655,-5.492311734950728,(ROOT (P_Name _Name) (VP (AUX _had) (NOT _n't) (VP (VBD _disappeared) (NP (DT _a) (P_lot _lot) (PP (P_of _of) (NNS _forks))))) (P_. _.)),bad,causative,591,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.549511105934554,-5.492311734950728,FALSE
Name had n't cracked a lot of forks .,Name had n't cracked a lot of forks .,-49.94559995341099,-5.549511105934554,(ROOT (P_Name _Name) (VP (AUX _had) (NOT _n't) (VP (VBD _cracked) (NP (DT _a) (P_lot _lot) (PP (P_of _of) (NNS _forks))))) (P_. _.)),good,causative,591,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.549511105934554,-5.492311734950728,FALSE
Name had n't disappeared a lot of forks .,Name had n't disappeared a lot of forks .,-49.553271452207014,-5.505919050245224,(ROOT (NNP _Name) (VP (AUX _had) (NOT _n't) (VP (VBD _disappeared) (NP (P_a _a) (NN _lot) (P_of _of) (NP _forks)))) (P_. _.)),bad,causative,591,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.78983897376055,-5.505919050245224,FALSE
Name had n't cracked a lot of forks .,Name had n't cracked a lot of forks .,-52.10855076384495,-5.78983897376055,(ROOT (NNP _Name) (VP (AUX _had) (NOT _n't) (VP (VBN _cracked) (NP (P_a _a) (NN _lot) (P_of _of) (NP _forks)))) (P_. _.)),good,causative,591,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.78983897376055,-5.505919050245224,FALSE
Name had n't disappeared a lot of forks .,Name had n't disappeared a lot of forks .,-48.96281579689171,-5.440312866321301,(ROOT (P_Name _Name) (VP (AUX _had) (P_n't _n't) (VP (VBD _disappeared) (NP (P_a _a) (NN _lot)) (PP (P_of _of) (NNS _forks)))) (. _.)),bad,causative,591,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.454406041534207,-5.440312866321301,FALSE
Name had n't cracked a lot of forks .,Name had n't cracked a lot of forks .,-49.08965437380786,-5.454406041534207,(ROOT (P_Name _Name) (VP (AUX _had) (P_n't _n't) (VP (VBD _cracked) (NP (P_a _a) (NN _lot)) (PP (P_of _of) (NNS _forks)))) (. _.)),good,causative,591,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.454406041534207,-5.440312866321301,FALSE
Name had n't disappeared a lot of forks .,Name had n't disappeared a lot of forks .,-50.37985131518045,-5.597761257242272,(ROOT (P_Name _Name) (VP (AUX _had) (NOT _n't) (VP (VBD _disappeared) (NP (P_a _a) (NN _lot)) (PP (P_of _of) (NNS _forks)))) (P_. _.)),bad,causative,591,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.6084265272284135,-5.597761257242272,FALSE
Name had n't cracked a lot of forks .,Name had n't cracked a lot of forks .,-50.47583874505572,-5.6084265272284135,(ROOT (P_Name _Name) (VP (AUX _had) (NOT _n't) (VP (VBD _cracked) (NP (P_a _a) (NN _lot)) (PP (P_of _of) (NNS _forks)))) (P_. _.)),good,causative,591,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.6084265272284135,-5.597761257242272,FALSE
Name had n't disappeared a lot of forks .,Name had n't disappeared a lot of forks .,-49.119851764845144,-5.457761307205016,(ROOT (NNP _Name) (VP (AUX _had) (P_n't _n't) (VP (VBD _disappeared) (NP (P_a _a) (NN _lot)) (PP (P_of _of) (NNS _forks)))) (P_. _.)),bad,causative,591,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.381169658056962,-5.457761307205016,TRUE
Name had n't cracked a lot of forks .,Name had n't cracked a lot of forks .,-48.430526922512655,-5.381169658056962,(ROOT (NNP _Name) (VP (AUX _had) (P_n't _n't) (VP (VBD _cracked) (NP (P_a _a) (NN _lot)) (PP (P_of _of) (NNS _forks)))) (P_. _.)),good,causative,591,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.381169658056962,-5.457761307205016,TRUE
Name had n't disappeared a lot of forks .,Name had n't disappeared a lot of forks .,-47.51472031479497,-5.279413368310553,(ROOT (NNP _Name) (VP (AUX _had) (P_n't _n't) (VP (VBD _disappeared) (NP (DT _a) (P_lot _lot) (P_of _of) (NP _forks)))) (. _.)),bad,causative,591,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.309836366676704,-5.279413368310553,FALSE
Name had n't cracked a lot of forks .,Name had n't cracked a lot of forks .,-47.78852730009034,-5.309836366676704,(ROOT (NNP _Name) (VP (AUX _had) (P_n't _n't) (VP (VBD _cracked) (NP (DT _a) (P_lot _lot) (P_of _of) (NP _forks)))) (. _.)),good,causative,591,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.309836366676704,-5.279413368310553,FALSE
Name had n't disappeared a lot of forks .,Name had n't disappeared a lot of forks .,-47.914036813420935,-5.323781868157882,(ROOT (P_Name _Name) (VP (AUX _had) (NOT _n't) (VP (VBD _disappeared) (NP (P_a _a) (P_lot _lot) (PP (P_of _of) (NNS _forks))))) (P_. _.)),bad,causative,591,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.610637594914865,-5.323781868157882,FALSE
Name had n't cracked a lot of forks .,Name had n't cracked a lot of forks .,-50.49573835423378,-5.610637594914865,(ROOT (P_Name _Name) (VP (AUX _had) (NOT _n't) (VP (VBN _cracked) (NP (P_a _a) (P_lot _lot) (PP (P_of _of) (NNS _forks))))) (P_. _.)),good,causative,591,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.610637594914865,-5.323781868157882,FALSE
Name had n't disappeared a lot of forks .,Name had n't disappeared a lot of forks .,-47.11195643820623,-5.234661826467359,(ROOT (NP _Name) (AUX _had) (P_n't _n't) (VP (VBD _disappeared) (NP (P_a _a) (P_lot _lot) (PP (P_of _of) (NNS _forks)))) (P_. _.)),bad,causative,591,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.130884796563908,-5.234661826467359,TRUE
Name had n't cracked a lot of forks .,Name had n't cracked a lot of forks .,-46.17796316907517,-5.130884796563908,(ROOT (NP _Name) (AUX _had) (P_n't _n't) (VP (VBD _cracked) (NP (P_a _a) (P_lot _lot) (PP (P_of _of) (NNS _forks)))) (P_. _.)),good,causative,591,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.130884796563908,-5.234661826467359,TRUE
those people fell most bananas .,those people fell most bananas .,-46.51930045153085,-7.753216741921808,(ROOT (NP (P_those _those) (NNS _people)) (VP (VBD _fell) (NP (NN _most) (NNS _bananas))) (P_. _.)),bad,causative,600,syntax,argument_structure,sample1.0.FG-output.rank-1,-7.930605536853094,-7.753216741921808,FALSE
those people grow most bananas .,those people grow most bananas .,-47.58363322111857,-7.930605536853094,(ROOT (NP (P_those _those) (NNS _people)) (VP (VB _grow) (NP (NN _most) (NNS _bananas))) (P_. _.)),good,causative,600,syntax,argument_structure,sample1.0.FG-output.rank-1,-7.930605536853094,-7.753216741921808,FALSE
those people fell most bananas .,those people fell most bananas .,-59.746870956532476,-9.957811826088744,(ROOT (NP (P_those _those) (NNS _people)) (VP (VBD _fell) (NP (JJS _most) (PP _bananas))) (P_. _.)),bad,causative,600,syntax,argument_structure,sample10.0.FG-output.rank-1,-10.180210831861176,-9.957811826088744,FALSE
those people grow most bananas .,those people grow most bananas .,-61.08126499116705,-10.180210831861176,(ROOT (NP (P_those _those) (NNS _people)) (VP (VB _grow) (NP (JJS _most) (PP _bananas))) (P_. _.)),good,causative,600,syntax,argument_structure,sample10.0.FG-output.rank-1,-10.180210831861176,-9.957811826088744,FALSE
those people fell most bananas .,those people fell most bananas .,-60.16741499698225,-10.027902499497042,(ROOT (NP (P_those _those) (NNS _people)) (VP (VBD _fell) (NP (JJS _most) (PP _bananas))) (P_. _.)),bad,causative,600,syntax,argument_structure,sample2.0.FG-output.rank-1,-10.283065217765673,-10.027902499497042,FALSE
those people grow most bananas .,those people grow most bananas .,-61.69839130659404,-10.283065217765673,(ROOT (NP (P_those _those) (NNS _people)) (VP (VB _grow) (NP (JJS _most) (PP _bananas))) (P_. _.)),good,causative,600,syntax,argument_structure,sample2.0.FG-output.rank-1,-10.283065217765673,-10.027902499497042,FALSE
those people fell most bananas .,those people fell most bananas .,-45.96938684021849,-7.661564473369748,(ROOT (NP (P_those _those) (NNS _people)) (VP (VBD _fell) (NP (NN _most) (NNS _bananas))) (P_. _.)),bad,causative,600,syntax,argument_structure,sample3.0.FG-output.rank-1,-7.957036759443736,-7.661564473369748,FALSE
those people grow most bananas .,those people grow most bananas .,-47.74222055666242,-7.957036759443736,(ROOT (NP (P_those _those) (NNS _people)) (VP (VB _grow) (NP (NN _most) (NNS _bananas))) (P_. _.)),good,causative,600,syntax,argument_structure,sample3.0.FG-output.rank-1,-7.957036759443736,-7.661564473369748,FALSE
those people fell most bananas .,those people fell most bananas .,-52.608346378581196,-8.768057729763532,(ROOT (NP (P_those _those) (NNS _people)) (VBD _fell) (NP (NN _most) (NNS _bananas)) (. _.)),bad,causative,600,syntax,argument_structure,sample4.0.FG-output.rank-1,-9.435281124850032,-8.768057729763532,FALSE
those people grow most bananas .,those people grow most bananas .,-56.611686749100194,-9.435281124850032,(ROOT (NP (P_those _those) (NNS _people)) (VP (VB _grow) (NP (NN _most) (NNS _bananas))) (P_. _.)),good,causative,600,syntax,argument_structure,sample4.0.FG-output.rank-1,-9.435281124850032,-8.768057729763532,FALSE
those people fell most bananas .,those people fell most bananas .,-46.42653342585703,-7.737755570976172,(ROOT (NP (P_those _those) (NNS _people)) (VP (VBD _fell) (NP (NN _most) (NNS _bananas))) (P_. _.)),bad,causative,600,syntax,argument_structure,sample5.0.FG-output.rank-1,-8.064471686864222,-7.737755570976172,FALSE
those people grow most bananas .,those people grow most bananas .,-48.386830121185334,-8.064471686864222,(ROOT (NP (P_those _those) (NNS _people)) (VP (VB _grow) (NP (NN _most) (NNS _bananas))) (P_. _.)),good,causative,600,syntax,argument_structure,sample5.0.FG-output.rank-1,-8.064471686864222,-7.737755570976172,FALSE
those people fell most bananas .,those people fell most bananas .,-43.92595819379814,-7.32099303229969,(ROOT (NP (P_those _those) (NNS _people)) (VBD _fell) (NP (NN _most) (NNS _bananas)) (. _.)),bad,causative,600,syntax,argument_structure,sample6.0.FG-output.rank-1,-8.113303220216268,-7.32099303229969,FALSE
those people grow most bananas .,those people grow most bananas .,-48.679819321297614,-8.113303220216268,(ROOT (NP (P_those _those) (NNS _people)) (VP (VB _grow) (NP (NN _most) (NNS _bananas))) (. _.)),good,causative,600,syntax,argument_structure,sample6.0.FG-output.rank-1,-8.113303220216268,-7.32099303229969,FALSE
those people fell most bananas .,those people fell most bananas .,-46.46393458187419,-7.743989096979032,(ROOT (NP (P_those _those) (NNS _people)) (VP (VBD _fell) (NP (NN _most) (NNS _bananas))) (P_. _.)),bad,causative,600,syntax,argument_structure,sample8.0.FG-output.rank-1,-8.132615240462743,-7.743989096979032,FALSE
those people grow most bananas .,those people grow most bananas .,-48.79569144277645,-8.132615240462743,(ROOT (NP (P_those _those) (NNS _people)) (VP (VB _grow) (NP (NN _most) (NNS _bananas))) (P_. _.)),good,causative,600,syntax,argument_structure,sample8.0.FG-output.rank-1,-8.132615240462743,-7.743989096979032,FALSE
most ladies fall these glasses .,most ladies fall these glasses .,-46.430675919703894,-7.738445986617315,(ROOT (NP (NN _most) (NNS _ladies)) (VP (VB _fall) (NP (P_these _these) (NNS _glasses))) (P_. _.)),bad,causative,612,syntax,argument_structure,sample1.0.FG-output.rank-1,-7.897531894620317,-7.738445986617315,FALSE
most ladies tip over these glasses .,most ladies tip over these glasses .,-55.28272326234222,-7.897531894620317,(ROOT (NP (NN _most) (NNS _ladies)) (VP (VB _tip) (PRT _over) (NP (P_these _these) (NNS _glasses))) (P_. _.)),good,causative,612,syntax,argument_structure,sample1.0.FG-output.rank-1,-7.897531894620317,-7.738445986617315,FALSE
most ladies fall these glasses .,most ladies fall these glasses .,-58.48181005093964,-9.746968341823274,(ROOT (NP (JJS _most) (PP _ladies)) (VP (VB _fall) (NP (P_these _these) (NNS _glasses))) (P_. _.)),bad,causative,612,syntax,argument_structure,sample10.0.FG-output.rank-1,-8.813928031470303,-9.746968341823274,TRUE
most ladies tip over these glasses .,most ladies tip over these glasses .,-61.697496220292116,-8.813928031470303,(ROOT (NP (JJS _most) (PP (NP (NNS _ladies) (NN _tip)) (IN _over) (NP (P_these _these) (NNS _glasses)))) (P_. _.)),good,causative,612,syntax,argument_structure,sample10.0.FG-output.rank-1,-8.813928031470303,-9.746968341823274,TRUE
most ladies fall these glasses .,most ladies fall these glasses .,-59.58013190466236,-9.930021984110391,(ROOT (NP (JJS _most) (PP _ladies)) (VP (VB _fall) (NP (P_these _these) (NNS _glasses))) (P_. _.)),bad,causative,612,syntax,argument_structure,sample2.0.FG-output.rank-1,-8.972409672648583,-9.930021984110391,TRUE
most ladies tip over these glasses .,most ladies tip over these glasses .,-62.80686770854008,-8.972409672648583,(ROOT (NP (JJS _most) (PP (NP (NNS _ladies) (NN _tip)) (IN _over) (NP (P_these _these) (NNS _glasses)))) (P_. _.)),good,causative,612,syntax,argument_structure,sample2.0.FG-output.rank-1,-8.972409672648583,-9.930021984110391,TRUE
most ladies fall these glasses .,most ladies fall these glasses .,-46.224547100360525,-7.7040911833934205,(ROOT (NP (NN _most) (NNS _ladies)) (VP (VB _fall) (NP (P_these _these) (NNS _glasses))) (P_. _.)),bad,causative,612,syntax,argument_structure,sample3.0.FG-output.rank-1,-7.73983560270575,-7.7040911833934205,FALSE
most ladies tip over these glasses .,most ladies tip over these glasses .,-54.17884921894025,-7.73983560270575,(ROOT (NP (NN _most) (NNS _ladies)) (VP (VB _tip) (PRT _over) (NP (P_these _these) (NNS _glasses))) (P_. _.)),good,causative,612,syntax,argument_structure,sample3.0.FG-output.rank-1,-7.73983560270575,-7.7040911833934205,FALSE
most ladies fall these glasses .,most ladies fall these glasses .,-54.93551050785917,-9.155918417976528,(ROOT (NP (NN _most) (NNS _ladies)) (VP (VB _fall) (NP (P_these _these) (NNS _glasses))) (P_. _.)),bad,causative,612,syntax,argument_structure,sample4.0.FG-output.rank-1,-8.606974744995146,-9.155918417976528,TRUE
most ladies tip over these glasses .,most ladies tip over these glasses .,-60.24882321496602,-8.606974744995146,(ROOT (NP (P_most _most) (PP (NP (NNS _ladies) (NN _tip)) (IN _over) (NP (P_these _these) (NNS _glasses)))) (P_. _.)),good,causative,612,syntax,argument_structure,sample4.0.FG-output.rank-1,-8.606974744995146,-9.155918417976528,TRUE
most ladies fall these glasses .,most ladies fall these glasses .,-46.03679182304107,-7.672798637173511,(ROOT (NP (NN _most) (NNS _ladies)) (VP (VB _fall) (NP (P_these _these) (NNS _glasses))) (P_. _.)),bad,causative,612,syntax,argument_structure,sample5.0.FG-output.rank-1,-8.389014329103428,-7.672798637173511,FALSE
most ladies tip over these glasses .,most ladies tip over these glasses .,-58.723100303724,-8.389014329103428,(ROOT (NP (NN _most) (NNS _ladies)) (NP (NN _tip) (PP (P_over _over) (NP (P_these _these) (NNS _glasses)))) (P_. _.)),good,causative,612,syntax,argument_structure,sample5.0.FG-output.rank-1,-8.389014329103428,-7.672798637173511,FALSE
most ladies fall these glasses .,most ladies fall these glasses .,-45.72923062535942,-7.621538437559903,(ROOT (NP (NN _most) (NNS _ladies)) (VP (VB _fall) (NP (P_these _these) (NNS _glasses))) (. _.)),bad,causative,612,syntax,argument_structure,sample6.0.FG-output.rank-1,-7.78943559394633,-7.621538437559903,FALSE
most ladies tip over these glasses .,most ladies tip over these glasses .,-54.526049157624314,-7.78943559394633,(ROOT (NP (NN _most) (NNS _ladies)) (VP (VB _tip) (RP _over) (NP (P_these _these) (NNS _glasses))) (. _.)),good,causative,612,syntax,argument_structure,sample6.0.FG-output.rank-1,-7.78943559394633,-7.621538437559903,FALSE
most ladies fall these glasses .,most ladies fall these glasses .,-46.277342491471224,-7.712890415245204,(ROOT (NP (NN _most) (NNS _ladies)) (VP (VB _fall) (NP (P_these _these) (NNS _glasses))) (P_. _.)),bad,causative,612,syntax,argument_structure,sample8.0.FG-output.rank-1,-7.857784996668611,-7.712890415245204,FALSE
most ladies tip over these glasses .,most ladies tip over these glasses .,-55.00449497668028,-7.857784996668611,(ROOT (NP (NN _most) (NNS _ladies)) (VP (VB _tip) (PRT _over) (NP (P_these _these) (NNS _glasses))) (P_. _.)),good,causative,612,syntax,argument_structure,sample8.0.FG-output.rank-1,-7.857784996668611,-7.712890415245204,FALSE
Name fell apart the mirrors .,Name fell apart the mirrors .,-31.68296795276878,-5.2804946587947965,(ROOT (P_Name _Name) (VP (VBD _fell) (PRT _apart) (NP (P_the _the) (NNS _mirrors))) (P_. _.)),bad,causative,705,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.238410071230322,-5.2804946587947965,TRUE
Name tipped over the mirrors .,Name tipped over the mirrors .,-31.43046042738193,-5.238410071230322,(ROOT (NP _Name) (VBD _tipped) (IN _over) (NP (P_the _the) (NNS _mirrors)) (. _.)),good,causative,705,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.238410071230322,-5.2804946587947965,TRUE
Name fell apart the mirrors .,Name fell apart the mirrors .,-33.4738346298936,-5.5789724383156,(ROOT (NNP _Name) (VP (VBD _fell) (RP _apart) (NP (P_the _the) (NNS _mirrors))) (. _.)),bad,causative,705,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.803840655959486,-5.5789724383156,TRUE
Name tipped over the mirrors .,Name tipped over the mirrors .,-28.823043935756914,-4.803840655959486,(ROOT (NNP _Name) (VP (VBD _tipped) (P_over _over) (NP (P_the _the) (NNS _mirrors))) (. _.)),good,causative,705,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.803840655959486,-5.5789724383156,TRUE
Name fell apart the mirrors .,Name fell apart the mirrors .,-33.45689254924747,-5.576148758207912,(ROOT (P_Name _Name) (VP (VBD _fell) (PRT _apart) (NP (P_the _the) (NNS _mirrors))) (P_. _.)),bad,causative,705,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.95595426537162,-5.576148758207912,TRUE
Name tipped over the mirrors .,Name tipped over the mirrors .,-29.73572559222972,-4.95595426537162,(ROOT (P_Name _Name) (VP (VBD _tipped) (P_over _over) (NP (P_the _the) (NNS _mirrors))) (P_. _.)),good,causative,705,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.95595426537162,-5.576148758207912,TRUE
Name fell apart the mirrors .,Name fell apart the mirrors .,-35.97424357370465,-5.995707262284108,(ROOT (P_Name _Name) (VP (VBD _fell) (PRT _apart)) (NP (P_the _the) (NNS _mirrors)) (. _.)),bad,causative,705,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.892671957382251,-5.995707262284108,TRUE
Name tipped over the mirrors .,Name tipped over the mirrors .,-29.356031744293503,-4.892671957382251,(ROOT (NNP _Name) (VP (VBD _tipped) (P_over _over) (NP (P_the _the) (NNS _mirrors))) (P_. _.)),good,causative,705,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.892671957382251,-5.995707262284108,TRUE
Name fell apart the mirrors .,Name fell apart the mirrors .,-34.176396679233214,-5.696066113205536,(ROOT (P_Name _Name) (VP (VBD _fell) (PRT _apart) (NP (P_the _the) (NNS _mirrors))) (. _.)),bad,causative,705,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.920273127288369,-5.696066113205536,TRUE
Name tipped over the mirrors .,Name tipped over the mirrors .,-29.521638763730213,-4.920273127288369,(ROOT (P_Name _Name) (VP (VBD _tipped) (P_over _over) (NP (P_the _the) (NNS _mirrors))) (. _.)),good,causative,705,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.920273127288369,-5.696066113205536,TRUE
Name fell apart the mirrors .,Name fell apart the mirrors .,-39.316111031450475,-6.552685171908412,(ROOT (P_Name _Name) (VP (VBD _fell) (ADVP (RB _apart) (NP (P_the _the) (NNS _mirrors)))) (P_. _.)),bad,causative,705,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.542743285772474,-6.552685171908412,TRUE
Name tipped over the mirrors .,Name tipped over the mirrors .,-33.25645971463484,-5.542743285772474,(ROOT (P_Name _Name) (VP (VBD _tipped) (PP (P_over _over) (NP (P_the _the) (NNS _mirrors)))) (P_. _.)),good,causative,705,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.542743285772474,-6.552685171908412,TRUE
Name fell apart the mirrors .,Name fell apart the mirrors .,-32.244731626878625,-5.374121937813104,(ROOT (NNP _Name) (VP (VBD _fell) (PRT _apart) (NP (P_the _the) (NNS _mirrors))) (P_. _.)),bad,causative,705,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.80622765195231,-5.374121937813104,TRUE
Name tipped over the mirrors .,Name tipped over the mirrors .,-28.837365911713857,-4.80622765195231,(ROOT (NNP _Name) (VP (VBD _tipped) (P_over _over) (NP (P_the _the) (NNS _mirrors))) (P_. _.)),good,causative,705,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.80622765195231,-5.374121937813104,TRUE
Name fell apart the mirrors .,Name fell apart the mirrors .,-31.040244343580326,-5.173374057263388,(ROOT (NNP _Name) (VP (VBD _fell) (RP _apart) (NP (P_the _the) (NNS _mirrors))) (. _.)),bad,causative,705,syntax,argument_structure,sample7.0.FG-output.rank-1,-Inf,-5.173374057263388,NA
Name fell apart the mirrors .,Name fell apart the mirrors .,-31.312817663129184,-5.218802943854864,(ROOT (P_Name _Name) (VP (VBD _fell) (RP _apart) (NP (P_the _the) (NNS _mirrors))) (P_. _.)),bad,causative,705,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.320758907803397,-5.218802943854864,FALSE
Name tipped over the mirrors .,Name tipped over the mirrors .,-31.924553446820383,-5.320758907803397,(ROOT (P_Name _Name) (VP (VBD _tipped) (RP _over) (NP (P_the _the) (NNS _mirrors))) (P_. _.)),good,causative,705,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.320758907803397,-5.218802943854864,FALSE
Name fell apart the mirrors .,Name fell apart the mirrors .,-36.49600078152001,-6.082666796920002,(ROOT (P_Name _Name) (VP (VBD _fell) (ADVP (RB _apart) (NP (P_the _the) (NNS _mirrors)))) (. _.)),bad,causative,705,syntax,argument_structure,sample9.0.FG-output.rank-1,-Inf,-6.082666796920002,NA
Name might grow bananas .,Name might grow bananas .,-32.243371051391705,-6.448674210278341,(ROOT (P_Name _Name) (VP (P_might _might) (VP (VB _grow) (NP _bananas))) (P_. _.)),good,causative,746,syntax,argument_structure,sample1.0.FG-output.rank-1,-6.448674210278341,-6.197161614173798,FALSE
Name might fall bananas .,Name might fall bananas .,-30.98580807086899,-6.197161614173798,(ROOT (P_Name _Name) (VP (P_might _might) (VP (VB _fall) (NP _bananas))) (P_. _.)),bad,causative,746,syntax,argument_structure,sample1.0.FG-output.rank-1,-6.448674210278341,-6.197161614173798,FALSE
Name might grow bananas .,Name might grow bananas .,-31.811689084045337,-6.362337816809068,(ROOT (NNP _Name) (VP (P_might _might) (VP (VB _grow) (NNS _bananas))) (. _.)),good,causative,746,syntax,argument_structure,sample10.0.FG-output.rank-1,-6.362337816809068,-6.075099671211504,FALSE
Name might fall bananas .,Name might fall bananas .,-30.37549835605752,-6.075099671211504,(ROOT (NNP _Name) (VP (P_might _might) (VP (VB _fall) (NNS _bananas))) (. _.)),bad,causative,746,syntax,argument_structure,sample10.0.FG-output.rank-1,-6.362337816809068,-6.075099671211504,FALSE
Name might grow bananas .,Name might grow bananas .,-32.44400846499981,-6.488801692999962,(ROOT (P_Name _Name) (VP (MD _might) (VB _grow) (NP _bananas)) (P_. _.)),good,causative,746,syntax,argument_structure,sample2.0.FG-output.rank-1,-6.488801692999962,-6.237396893987046,FALSE
Name might fall bananas .,Name might fall bananas .,-31.18698446993523,-6.237396893987046,(ROOT (P_Name _Name) (VP (MD _might) (VB _fall) (NP _bananas)) (P_. _.)),bad,causative,746,syntax,argument_structure,sample2.0.FG-output.rank-1,-6.488801692999962,-6.237396893987046,FALSE
Name might grow bananas .,Name might grow bananas .,-31.459966018613336,-6.291993203722667,(ROOT (NNP _Name) (VP (MD _might) (VB _grow) (NP _bananas)) (P_. _.)),good,causative,746,syntax,argument_structure,sample3.0.FG-output.rank-1,-6.291993203722667,-6.0256582490640245,FALSE
Name might fall bananas .,Name might fall bananas .,-30.12829124532012,-6.0256582490640245,(ROOT (NNP _Name) (VP (MD _might) (VB _fall) (NP _bananas)) (P_. _.)),bad,causative,746,syntax,argument_structure,sample3.0.FG-output.rank-1,-6.291993203722667,-6.0256582490640245,FALSE
Name might grow bananas .,Name might grow bananas .,-31.74648157461777,-6.349296314923555,(ROOT (P_Name _Name) (VP (MD _might) (VB _grow) (NP _bananas)) (. _.)),good,causative,746,syntax,argument_structure,sample4.0.FG-output.rank-1,-6.349296314923555,-6.060134020595871,FALSE
Name might fall bananas .,Name might fall bananas .,-30.300670102979357,-6.060134020595871,(ROOT (P_Name _Name) (VP (MD _might) (VB _fall) (NP _bananas)) (. _.)),bad,causative,746,syntax,argument_structure,sample4.0.FG-output.rank-1,-6.349296314923555,-6.060134020595871,FALSE
Name might grow bananas .,Name might grow bananas .,-31.198453675724835,-6.239690735144967,(ROOT (P_Name _Name) (VP (P_might _might) (VP (VB _grow) (NNS _bananas))) (P_. _.)),good,causative,746,syntax,argument_structure,sample5.0.FG-output.rank-1,-6.239690735144967,-5.898800149395447,FALSE
Name might fall bananas .,Name might fall bananas .,-29.494000746977235,-5.898800149395447,(ROOT (P_Name _Name) (VP (P_might _might) (VP (VB _fall) (NNS _bananas))) (P_. _.)),bad,causative,746,syntax,argument_structure,sample5.0.FG-output.rank-1,-6.239690735144967,-5.898800149395447,FALSE
Name might grow bananas .,Name might grow bananas .,-31.662388905496304,-6.332477781099261,(ROOT (NNP _Name) (VP (MD _might) (VB _grow) (NP _bananas)) (P_. _.)),good,causative,746,syntax,argument_structure,sample6.0.FG-output.rank-1,-6.332477781099261,-5.858397448061205,FALSE
Name might fall bananas .,Name might fall bananas .,-29.291987240306025,-5.858397448061205,(ROOT (NNP _Name) (VP (MD _might) (VB _fall) (NP _bananas)) (P_. _.)),bad,causative,746,syntax,argument_structure,sample6.0.FG-output.rank-1,-6.332477781099261,-5.858397448061205,FALSE
Name might grow bananas .,Name might grow bananas .,-32.1022608031605,-6.4204521606321,(ROOT (NNP _Name) (VP (P_might _might) (VP (VB _grow) (NNS _bananas))) (. _.)),good,causative,746,syntax,argument_structure,sample7.0.FG-output.rank-1,-6.4204521606321,-Inf,NA
Name might grow bananas .,Name might grow bananas .,-32.330696944452974,-6.4661393888905945,(ROOT (P_Name _Name) (VP (MD _might) (VB _grow) (NP _bananas)) (P_. _.)),good,causative,746,syntax,argument_structure,sample8.0.FG-output.rank-1,-6.4661393888905945,-6.118864801702012,FALSE
Name might fall bananas .,Name might fall bananas .,-30.59432400851006,-6.118864801702012,(ROOT (P_Name _Name) (VP (MD _might) (VB _fall) (NP _bananas)) (P_. _.)),bad,causative,746,syntax,argument_structure,sample8.0.FG-output.rank-1,-6.4661393888905945,-6.118864801702012,FALSE
Name might grow bananas .,Name might grow bananas .,-31.299028504593608,-6.259805700918721,(ROOT (P_Name _Name) (VP (P_might _might) (VP (VB _grow) (NNS _bananas))) (. _.)),good,causative,746,syntax,argument_structure,sample9.0.FG-output.rank-1,-6.259805700918721,-Inf,NA
Name should paint Name .,Name should paint Name .,-23.706871318536805,-4.741374263707361,(ROOT (P_Name _Name) (VP (MD _should) (VB _paint) (NP _Name)) (P_. _.)),bad,causative,817,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.591965697648822,-4.741374263707361,TRUE
Name should move Name .,Name should move Name .,-22.959828488244113,-4.591965697648822,(ROOT (P_Name _Name) (VP (MD _should) (VB _move) (NP _Name)) (P_. _.)),good,causative,817,syntax,argument_structure,sample1.0.FG-output.rank-1,-4.591965697648822,-4.741374263707361,TRUE
Name should paint Name .,Name should paint Name .,-23.459172304750023,-4.6918344609500044,(ROOT (NNP _Name) (VP (MD _should) (VB _paint) (NP _Name)) (. _.)),bad,causative,817,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.5893746903955375,-4.6918344609500044,TRUE
Name should move Name .,Name should move Name .,-22.946873451977687,-4.5893746903955375,(ROOT (NNP _Name) (VP (MD _should) (VB _move) (NP _Name)) (. _.)),good,causative,817,syntax,argument_structure,sample10.0.FG-output.rank-1,-4.5893746903955375,-4.6918344609500044,TRUE
Name should paint Name .,Name should paint Name .,-23.311082730157864,-4.662216546031573,(ROOT (P_Name _Name) (VP (MD _should) (VB _paint) (NP _Name)) (P_. _.)),bad,causative,817,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.504120422305069,-4.662216546031573,TRUE
Name should move Name .,Name should move Name .,-22.520602111525342,-4.504120422305069,(ROOT (P_Name _Name) (VP (MD _should) (VB _move) (NP _Name)) (P_. _.)),good,causative,817,syntax,argument_structure,sample2.0.FG-output.rank-1,-4.504120422305069,-4.662216546031573,TRUE
Name should paint Name .,Name should paint Name .,-23.831130132321327,-4.766226026464265,(ROOT (NNP _Name) (VP (MD _should) (VB _paint) (NP _Name)) (P_. _.)),bad,causative,817,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.463715282180199,-4.766226026464265,TRUE
Name should move Name .,Name should move Name .,-22.318576410900995,-4.463715282180199,(ROOT (NNP _Name) (VP (MD _should) (VB _move) (NP _Name)) (P_. _.)),good,causative,817,syntax,argument_structure,sample3.0.FG-output.rank-1,-4.463715282180199,-4.766226026464265,TRUE
Name should paint Name .,Name should paint Name .,-24.097939500802365,-4.819587900160473,(ROOT (P_Name _Name) (VP (MD _should) (VB _paint) (NP _Name)) (. _.)),bad,causative,817,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.552784124926676,-4.819587900160473,TRUE
Name should move Name .,Name should move Name .,-22.76392062463338,-4.552784124926676,(ROOT (P_Name _Name) (VP (MD _should) (VB _move) (NP _Name)) (. _.)),good,causative,817,syntax,argument_structure,sample4.0.FG-output.rank-1,-4.552784124926676,-4.819587900160473,TRUE
Name should paint Name .,Name should paint Name .,-23.282172528522747,-4.656434505704549,(ROOT (P_Name _Name) (VP (MD _should) (VB _paint) (NP _Name)) (P_. _.)),bad,causative,817,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.511600491167282,-4.656434505704549,TRUE
Name should move Name .,Name should move Name .,-22.55800245583641,-4.511600491167282,(ROOT (P_Name _Name) (VP (MD _should) (VB _move) (NP _Name)) (P_. _.)),good,causative,817,syntax,argument_structure,sample5.0.FG-output.rank-1,-4.511600491167282,-4.656434505704549,TRUE
Name should paint Name .,Name should paint Name .,-22.3578737397604,-4.47157474795208,(ROOT (NNP _Name) (VP (MD _should) (VB _paint) (NP _Name)) (P_. _.)),bad,causative,817,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.361099750138028,-4.47157474795208,TRUE
Name should move Name .,Name should move Name .,-21.805498750690138,-4.361099750138028,(ROOT (NNP _Name) (VP (MD _should) (VB _move) (NP _Name)) (P_. _.)),good,causative,817,syntax,argument_structure,sample6.0.FG-output.rank-1,-4.361099750138028,-4.47157474795208,TRUE
Name should paint Name .,Name should paint Name .,-24.284486945727814,-4.856897389145563,(ROOT (NNP _Name) (VP (MD _should) (VB _paint) (NP _Name)) (. _.)),bad,causative,817,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.76690791915691,-4.856897389145563,TRUE
Name should move Name .,Name should move Name .,-23.834539595784552,-4.76690791915691,(ROOT (NNP _Name) (VP (MD _should) (VB _move) (NP _Name)) (. _.)),good,causative,817,syntax,argument_structure,sample7.0.FG-output.rank-1,-4.76690791915691,-4.856897389145563,TRUE
Name should paint Name .,Name should paint Name .,-23.03484339338545,-4.60696867867709,(ROOT (P_Name _Name) (VP (MD _should) (VB _paint) (NP _Name)) (P_. _.)),bad,causative,817,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.469610613731717,-4.60696867867709,TRUE
Name should move Name .,Name should move Name .,-22.348053068658587,-4.469610613731717,(ROOT (P_Name _Name) (VP (MD _should) (VB _move) (NP _Name)) (P_. _.)),good,causative,817,syntax,argument_structure,sample8.0.FG-output.rank-1,-4.469610613731717,-4.60696867867709,TRUE
Name should paint Name .,Name should paint Name .,-23.10290755635131,-4.620581511270262,(ROOT (P_Name _Name) (VP (MD _should) (VB _paint) (NP _Name)) (. _.)),bad,causative,817,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.493287842650161,-4.620581511270262,TRUE
Name should move Name .,Name should move Name .,-22.466439213250805,-4.493287842650161,(ROOT (P_Name _Name) (VP (MD _should) (VB _move) (NP _Name)) (. _.)),good,causative,817,syntax,argument_structure,sample9.0.FG-output.rank-1,-4.493287842650161,-4.620581511270262,TRUE
Name has n't broken every car .,Name has n't broken every car .,-40.12699069612571,-5.732427242303673,(ROOT (P_Name _Name) (VP (AUX _has) (NOT _n't) (VP (VBN _broken) (NP (DT _every) (NN _car)))) (P_. _.)),good,causative,845,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.732427242303673,-6.108054798902553,TRUE
Name has n't disappeared every car .,Name has n't disappeared every car .,-42.756383592317874,-6.108054798902553,(ROOT (P_Name _Name) (VP (AUX _has) (NOT _n't) (VP (VBD _disappeared) (NP (DT _every) (NN _car)))) (P_. _.)),bad,causative,845,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.732427242303673,-6.108054798902553,TRUE
Name has n't broken every car .,Name has n't broken every car .,-40.859614315272616,-5.83708775932466,(ROOT (NP _Name) (AUX _has) (P_n't _n't) (VP (VBN _broken) (NP (DT _every) (NN _car))) (P_. _.)),good,causative,845,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.83708775932466,-5.92476878795462,TRUE
Name has n't disappeared every car .,Name has n't disappeared every car .,-41.47338151568234,-5.92476878795462,(ROOT (NP _Name) (AUX _has) (P_n't _n't) (VP (VBD _disappeared) (NP (DT _every) (NN _car))) (P_. _.)),bad,causative,845,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.83708775932466,-5.92476878795462,TRUE
Name has n't broken every car .,Name has n't broken every car .,-40.17251893931935,-5.738931277045622,(ROOT (NP _Name) (VP (AUX _has) (P_n't _n't) (P_broken _broken)) (NP (DT _every) (NN _car)) (P_. _.)),good,causative,845,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.738931277045622,-5.716815389006036,FALSE
Name has n't disappeared every car .,Name has n't disappeared every car .,-40.01770772304225,-5.716815389006036,(ROOT (P_Name _Name) (VP (AUX _has) (NOT _n't) (VP (VBD _disappeared) (DT _every) (NN _car))) (P_. _.)),bad,causative,845,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.738931277045622,-5.716815389006036,FALSE
Name has n't broken every car .,Name has n't broken every car .,-39.117219416696294,-5.588174202385185,(ROOT (NNP _Name) (VP (AUX _has) (NOT _n't) (VP (VBN _broken) (NP (DT _every) (NN _car)))) (P_. _.)),good,causative,845,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.588174202385185,-5.791861947497282,TRUE
Name has n't disappeared every car .,Name has n't disappeared every car .,-40.54303363248098,-5.791861947497282,(ROOT (NNP _Name) (VP (AUX _has) (NOT _n't) (VP (VBD _disappeared) (NP (DT _every) (NN _car)))) (P_. _.)),bad,causative,845,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.588174202385185,-5.791861947497282,TRUE
Name has n't broken every car .,Name has n't broken every car .,-40.90576061698544,-5.843680088140777,(ROOT (P_Name _Name) (VP (AUX _has) (P_n't _n't) (VP (VBN _broken) (NP (DT _every) (NN _car)))) (. _.)),good,causative,845,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.843680088140777,-5.9180654187415405,TRUE
Name has n't disappeared every car .,Name has n't disappeared every car .,-41.42645793119078,-5.9180654187415405,(ROOT (P_Name _Name) (VP (AUX _has) (P_n't _n't) (VP (VBD _disappeared) (NP (DT _every) (NN _car)))) (. _.)),bad,causative,845,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.843680088140777,-5.9180654187415405,TRUE
Name has n't broken every car .,Name has n't broken every car .,-41.23833700474139,-5.891191000677341,(ROOT (P_Name _Name) (VP (AUX _has) (NOT _n't) (VP (VBN _broken) (NP (DT _every) (NN _car)))) (P_. _.)),good,causative,845,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.891191000677341,-6.192812974840466,TRUE
Name has n't disappeared every car .,Name has n't disappeared every car .,-43.349690823883265,-6.192812974840466,(ROOT (P_Name _Name) (VP (AUX _has) (NOT _n't) (VP (VBD _disappeared) (NP (DT _every) (NN _car)))) (P_. _.)),bad,causative,845,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.891191000677341,-6.192812974840466,TRUE
Name has n't broken every car .,Name has n't broken every car .,-40.64312191001855,-5.806160272859793,(ROOT (NNP _Name) (VP (AUX _has) (P_n't _n't) (VP (VBN _broken) (NP (DT _every) (NN _car)))) (P_. _.)),good,causative,845,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.806160272859793,-6.174576141073708,TRUE
Name has n't disappeared every car .,Name has n't disappeared every car .,-43.22203298751596,-6.174576141073708,(ROOT (NNP _Name) (VP (AUX _has) (P_n't _n't) (VP (VBD _disappeared) (NP (DT _every) (NN _car)))) (P_. _.)),bad,causative,845,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.806160272859793,-6.174576141073708,TRUE
Name has n't broken every car .,Name has n't broken every car .,-41.93339604359369,-5.9904851490848126,(ROOT (NNP _Name) (VP (AUX _has) (P_n't _n't) (VP (VBN _broken) (NP (DT _every) (NN _car)))) (. _.)),good,causative,845,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.9904851490848126,-6.099631550338922,TRUE
Name has n't disappeared every car .,Name has n't disappeared every car .,-42.69742085237245,-6.099631550338922,(ROOT (NNP _Name) (VP (AUX _has) (P_n't _n't) (VP (VBD _disappeared) (NP (DT _every) (NN _car)))) (. _.)),bad,causative,845,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.9904851490848126,-6.099631550338922,TRUE
Name has n't broken every car .,Name has n't broken every car .,-41.559566405660746,-5.937080915094392,(ROOT (P_Name _Name) (VP (AUX _has) (NOT _n't) (VP (VBN _broken) (NP (DT _every) (NN _car)))) (P_. _.)),good,causative,845,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.937080915094392,-6.059660606195335,TRUE
Name has n't disappeared every car .,Name has n't disappeared every car .,-42.41762424336734,-6.059660606195335,(ROOT (P_Name _Name) (VP (AUX _has) (NOT _n't) (VP (VBD _disappeared) (NP (DT _every) (NN _car)))) (P_. _.)),bad,causative,845,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.937080915094392,-6.059660606195335,TRUE
Name has n't broken every car .,Name has n't broken every car .,-39.69461019991722,-5.670658599988174,(ROOT (NP _Name) (AUX _has) (P_n't _n't) (VP (VBN _broken) (NP (DT _every) (NN _car))) (P_. _.)),good,causative,845,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.670658599988174,-6.044397777255658,TRUE
Name has n't disappeared every car .,Name has n't disappeared every car .,-42.310784440789604,-6.044397777255658,(ROOT (NP _Name) (AUX _has) (P_n't _n't) (VP (VBD _disappeared) (NP (DT _every) (NN _car))) (P_. _.)),bad,causative,845,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.670658599988174,-6.044397777255658,TRUE
this teacher was n't falling apart every bicycle .,this teacher was n't falling apart every bicycle .,-66.00296971056089,-7.333663301173432,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (NOT _n't) (VP (VBG _falling) (NP (RB _apart) (DT _every) (NN _bicycle)))) (P_. _.)),bad,causative,853,syntax,argument_structure,sample1.0.FG-output.rank-1,-7.067393106347805,-7.333663301173432,TRUE
this teacher was n't rolling every bicycle .,this teacher was n't rolling every bicycle .,-56.53914485078244,-7.067393106347805,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (NOT _n't) (VP (VBG _rolling) (NP (DT _every) (NN _bicycle)))) (P_. _.)),good,causative,853,syntax,argument_structure,sample1.0.FG-output.rank-1,-7.067393106347805,-7.333663301173432,TRUE
this teacher was n't falling apart every bicycle .,this teacher was n't falling apart every bicycle .,-64.70896957968927,-7.189885508854363,(ROOT (NP (P_this _this) (NN _teacher)) (AUX _was) (P_n't _n't) (VP (VBG _falling) (PRT _apart) (NP (DT _every) (NN _bicycle))) (P_. _.)),bad,causative,853,syntax,argument_structure,sample10.0.FG-output.rank-1,-6.655798385507305,-7.189885508854363,TRUE
this teacher was n't rolling every bicycle .,this teacher was n't rolling every bicycle .,-53.24638708405844,-6.655798385507305,(ROOT (NP (P_this _this) (NN _teacher)) (COP _was) (NOT _n't) (NP (JJ _rolling) (DT _every) (NN _bicycle)) (. _.)),good,causative,853,syntax,argument_structure,sample10.0.FG-output.rank-1,-6.655798385507305,-7.189885508854363,TRUE
this teacher was n't falling apart every bicycle .,this teacher was n't falling apart every bicycle .,-63.963364764862554,-7.107040529429173,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (NOT _n't) (VP (VBG _falling) (PRT _apart) (NP (DT _every) (NN _bicycle)))) (P_. _.)),bad,causative,853,syntax,argument_structure,sample2.0.FG-output.rank-1,-6.563741527795279,-7.107040529429173,TRUE
this teacher was n't rolling every bicycle .,this teacher was n't rolling every bicycle .,-52.50993222236223,-6.563741527795279,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (NOT _n't) (VP (VBG _rolling) (DT _every) (NN _bicycle))) (P_. _.)),good,causative,853,syntax,argument_structure,sample2.0.FG-output.rank-1,-6.563741527795279,-7.107040529429173,TRUE
this teacher was n't falling apart every bicycle .,this teacher was n't falling apart every bicycle .,-62.4621382824733,-6.940237586941477,(ROOT (NP (P_this _this) (NN _teacher)) (AUX _was) (P_n't _n't) (VP (VBG _falling) (ADVP _apart) (NP (DT _every) (NN _bicycle))) (P_. _.)),bad,causative,853,syntax,argument_structure,sample3.0.FG-output.rank-1,-6.876368779556431,-6.940237586941477,TRUE
this teacher was n't rolling every bicycle .,this teacher was n't rolling every bicycle .,-55.01095023645145,-6.876368779556431,(ROOT (NP (P_this _this) (NN _teacher)) (AUX _was) (P_n't _n't) (VP (VBG _rolling) (NP (DT _every) (NN _bicycle))) (P_. _.)),good,causative,853,syntax,argument_structure,sample3.0.FG-output.rank-1,-6.876368779556431,-6.940237586941477,TRUE
this teacher was n't falling apart every bicycle .,this teacher was n't falling apart every bicycle .,-64.81419951871871,-7.201577724302079,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (P_n't _n't) (VP (VBG _falling) (PRT _apart) (NP (DT _every) (NN _bicycle)))) (P_. _.)),bad,causative,853,syntax,argument_structure,sample4.0.FG-output.rank-1,-7.058720724859215,-7.201577724302079,TRUE
this teacher was n't rolling every bicycle .,this teacher was n't rolling every bicycle .,-56.469765798873716,-7.058720724859215,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (P_n't _n't) (VP (VBG _rolling) (NP (DT _every) (NN _bicycle)))) (P_. _.)),good,causative,853,syntax,argument_structure,sample4.0.FG-output.rank-1,-7.058720724859215,-7.201577724302079,TRUE
this teacher was n't falling apart every bicycle .,this teacher was n't falling apart every bicycle .,-66.98464833517598,-7.442738703908442,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (NOT _n't) (VP (VBG _falling) (PRT _apart) (NP (DT _every) (NN _bicycle)))) (P_. _.)),bad,causative,853,syntax,argument_structure,sample5.0.FG-output.rank-1,-6.839870918782823,-7.442738703908442,TRUE
this teacher was n't rolling every bicycle .,this teacher was n't rolling every bicycle .,-54.71896735026258,-6.839870918782823,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (NOT _n't) (VP (VBG _rolling) (DT _every) (NN _bicycle))) (P_. _.)),good,causative,853,syntax,argument_structure,sample5.0.FG-output.rank-1,-6.839870918782823,-7.442738703908442,TRUE
this teacher was n't falling apart every bicycle .,this teacher was n't falling apart every bicycle .,-64.27977359096109,-7.142197065662343,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (P_n't _n't) (VP (VBG _falling) (RP _apart) (NP (DT _every) (NN _bicycle)))) (. _.)),bad,causative,853,syntax,argument_structure,sample6.0.FG-output.rank-1,-6.955086580159757,-7.142197065662343,TRUE
this teacher was n't rolling every bicycle .,this teacher was n't rolling every bicycle .,-55.64069264127806,-6.955086580159757,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (P_n't _n't) (VP (VBG _rolling) (DT _every) (NN _bicycle))) (. _.)),good,causative,853,syntax,argument_structure,sample6.0.FG-output.rank-1,-6.955086580159757,-7.142197065662343,TRUE
this teacher was n't falling apart every bicycle .,this teacher was n't falling apart every bicycle .,-64.85728365442932,-7.206364850492147,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (P_n't _n't) (VP (VBG _falling) (PRT _apart) (NP (DT _every) (NN _bicycle)))) (P_. _.)),bad,causative,853,syntax,argument_structure,sample7.0.FG-output.rank-1,-6.762545580420019,-7.206364850492147,TRUE
this teacher was n't rolling every bicycle .,this teacher was n't rolling every bicycle .,-54.10036464336015,-6.762545580420019,(ROOT (NP (P_this _this) (NN _teacher)) (VP (AUX _was) (P_n't _n't) (VP (VBG _rolling) (DT _every) (NN _bicycle))) (P_. _.)),good,causative,853,syntax,argument_structure,sample7.0.FG-output.rank-1,-6.762545580420019,-7.206364850492147,TRUE
this teacher was n't falling apart every bicycle .,this teacher was n't falling apart every bicycle .,-64.51495862566578,-7.168328736185087,(ROOT (NP (P_this _this) (NN _teacher)) (AUX _was) (NOT _n't) (VP (VBG _falling) (PRT _apart) (NP (DT _every) (NN _bicycle))) (. _.)),bad,causative,853,syntax,argument_structure,sample8.0.FG-output.rank-1,-6.899535171005019,-7.168328736185087,TRUE
this teacher was n't rolling every bicycle .,this teacher was n't rolling every bicycle .,-55.196281368040154,-6.899535171005019,(ROOT (NP (P_this _this) (NN _teacher)) (AUX _was) (NOT _n't) (VP (VBG _rolling) (DT _every) (NN _bicycle)) (. _.)),good,causative,853,syntax,argument_structure,sample8.0.FG-output.rank-1,-6.899535171005019,-7.168328736185087,TRUE
this teacher was n't falling apart every bicycle .,this teacher was n't falling apart every bicycle .,-62.23448966503272,-6.914943296114746,(ROOT (NP (P_this _this) (NN _teacher)) (AUX _was) (P_n't _n't) (VP (VBG _falling) (RP _apart) (NP (DT _every) (NN _bicycle))) (P_. _.)),bad,causative,853,syntax,argument_structure,sample9.0.FG-output.rank-1,-6.881611899656681,-6.914943296114746,TRUE
this teacher was n't rolling every bicycle .,this teacher was n't rolling every bicycle .,-55.05289519725345,-6.881611899656681,(ROOT (NP (P_this _this) (NN _teacher)) (AUX _was) (P_n't _n't) (VP (VBG _rolling) (NP (DT _every) (NN _bicycle))) (P_. _.)),good,causative,853,syntax,argument_structure,sample9.0.FG-output.rank-1,-6.881611899656681,-6.914943296114746,TRUE
Name is n't opening this mouth .,Name is n't opening this mouth .,-36.321476797028154,-5.188782399575451,(ROOT (P_Name _Name) (VP (AUX _is) (NOT _n't) (VP (VBG _opening) (NP (P_this _this) (NN _mouth)))) (P_. _.)),good,causative,903,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.188782399575451,-5.130973880886879,FALSE
Name is n't falling this mouth .,Name is n't falling this mouth .,-35.916817166208155,-5.130973880886879,(ROOT (P_Name _Name) (VP (AUX _is) (NOT _n't) (VP (VBG _falling) (NP (P_this _this) (NN _mouth)))) (P_. _.)),bad,causative,903,syntax,argument_structure,sample1.0.FG-output.rank-1,-5.188782399575451,-5.130973880886879,FALSE
Name is n't opening this mouth .,Name is n't opening this mouth .,-37.19373745038548,-5.313391064340783,(ROOT (NP _Name) (AUX _is) (P_n't _n't) (VP (VBG _opening) (NP (P_this _this) (NN _mouth))) (P_. _.)),good,causative,903,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.313391064340783,-5.371206138376496,TRUE
Name is n't falling this mouth .,Name is n't falling this mouth .,-37.598442968635474,-5.371206138376496,(ROOT (NP _Name) (AUX _is) (P_n't _n't) (VP (VBG _falling) (NP (P_this _this) (NN _mouth))) (P_. _.)),bad,causative,903,syntax,argument_structure,sample10.0.FG-output.rank-1,-5.313391064340783,-5.371206138376496,TRUE
Name is n't opening this mouth .,Name is n't opening this mouth .,-36.508002555895686,-5.215428936556527,(ROOT (P_Name _Name) (VP (AUX _is) (NOT _n't) (VP (VBG _opening) (DT _this) (NN _mouth))) (P_. _.)),good,causative,903,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.215428936556527,-5.157781508947956,FALSE
Name is n't falling this mouth .,Name is n't falling this mouth .,-36.10447056263569,-5.157781508947956,(ROOT (P_Name _Name) (VP (AUX _is) (NOT _n't) (VP (VBG _falling) (DT _this) (NN _mouth))) (P_. _.)),bad,causative,903,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.215428936556527,-5.157781508947956,FALSE
Name is n't opening this mouth .,Name is n't opening this mouth .,-37.071285896334054,-5.295897985190579,(ROOT (NNP _Name) (VP (AUX _is) (NOT _n't) (VP (VBG _opening) (NP (P_this _this) (NN _mouth)))) (P_. _.)),good,causative,903,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.295897985190579,-5.295897985190579,FALSE
Name is n't falling this mouth .,Name is n't falling this mouth .,-37.071285896334054,-5.295897985190579,(ROOT (NNP _Name) (VP (AUX _is) (NOT _n't) (VP (VBG _falling) (NP (P_this _this) (NN _mouth)))) (P_. _.)),bad,causative,903,syntax,argument_structure,sample3.0.FG-output.rank-1,-5.295897985190579,-5.295897985190579,FALSE
Name is n't opening this mouth .,Name is n't opening this mouth .,-38.940662215156195,-5.562951745022313,(ROOT (P_Name _Name) (VP (AUX _is) (P_n't _n't) (VP (VBG _opening) (NP (P_this _this) (NN _mouth)))) (. _.)),good,causative,903,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.562951745022313,-5.3335621260166,FALSE
Name is n't falling this mouth .,Name is n't falling this mouth .,-37.334934882116194,-5.3335621260166,(ROOT (P_Name _Name) (VP (AUX _is) (P_n't _n't) (VP (VBG _falling) (NP (P_this _this) (NN _mouth)))) (. _.)),bad,causative,903,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.562951745022313,-5.3335621260166,FALSE
Name is n't opening this mouth .,Name is n't opening this mouth .,-36.84037434401014,-5.262910620572876,(ROOT (P_Name _Name) (VP (AUX _is) (NOT _n't) (VP (VBG _opening) (DT _this) (NN _mouth))) (P_. _.)),good,causative,903,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.262910620572876,-5.1900333285871625,FALSE
Name is n't falling this mouth .,Name is n't falling this mouth .,-36.33023330011014,-5.1900333285871625,(ROOT (P_Name _Name) (VP (AUX _is) (NOT _n't) (VP (VBG _falling) (DT _this) (NN _mouth))) (P_. _.)),bad,causative,903,syntax,argument_structure,sample5.0.FG-output.rank-1,-5.262910620572876,-5.1900333285871625,FALSE
Name is n't opening this mouth .,Name is n't opening this mouth .,-36.58979650385726,-5.227113786265322,(ROOT (NNP _Name) (VP (AUX _is) (P_n't _n't) (VP (VBG _opening) (NP (P_this _this) (NN _mouth)))) (P_. _.)),good,causative,903,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.227113786265322,-5.128274166391036,FALSE
Name is n't falling this mouth .,Name is n't falling this mouth .,-35.89791916473725,-5.128274166391036,(ROOT (NNP _Name) (VP (AUX _is) (P_n't _n't) (VP (VBG _falling) (NP (P_this _this) (NN _mouth)))) (P_. _.)),bad,causative,903,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.227113786265322,-5.128274166391036,FALSE
Name is n't opening this mouth .,Name is n't opening this mouth .,-36.33552689841227,-5.190789556916038,(ROOT (NNP _Name) (VP (COP _is) (P_n't _n't) (VP (VBG _opening) (DT _this) (NN _mouth))) (. _.)),good,causative,903,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.190789556916038,-5.2485949334860384,TRUE
Name is n't falling this mouth .,Name is n't falling this mouth .,-36.74016453440227,-5.2485949334860384,(ROOT (NNP _Name) (VP (COP _is) (P_n't _n't) (VP (VBG _falling) (DT _this) (NN _mouth))) (. _.)),bad,causative,903,syntax,argument_structure,sample7.0.FG-output.rank-1,-5.190789556916038,-5.2485949334860384,TRUE
Name is n't opening this mouth .,Name is n't opening this mouth .,-35.73746453577349,-5.10535207653907,(ROOT (P_Name _Name) (VP (P_is _is) (NOT _n't) (VP (VBG _opening) (NP (P_this _this) (NN _mouth)))) (P_. _.)),good,causative,903,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.10535207653907,-5.146394728443356,TRUE
Name is n't falling this mouth .,Name is n't falling this mouth .,-36.024763099103495,-5.146394728443356,(ROOT (P_Name _Name) (VP (P_is _is) (NOT _n't) (VP (VBG _falling) (NP (P_this _this) (NN _mouth)))) (P_. _.)),bad,causative,903,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.10535207653907,-5.146394728443356,TRUE
Name is n't opening this mouth .,Name is n't opening this mouth .,-36.26389945848517,-5.180557065497881,(ROOT (NP _Name) (AUX _is) (P_n't _n't) (VP (VBG _opening) (NP (P_this _this) (NN _mouth))) (P_. _.)),good,causative,903,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.180557065497881,-5.180557065497881,FALSE
Name is n't falling this mouth .,Name is n't falling this mouth .,-36.26389945848517,-5.180557065497881,(ROOT (NP _Name) (AUX _is) (P_n't _n't) (VP (VBG _falling) (NP (P_this _this) (NN _mouth))) (P_. _.)),bad,causative,903,syntax,argument_structure,sample9.0.FG-output.rank-1,-5.180557065497881,-5.180557065497881,FALSE
Name had disappeared this carriage .,Name had disappeared this carriage .,-38.74320296964027,-6.457200494940046,(ROOT (P_Name _Name) (VP (VBD _had) (VP (VBD _disappeared) (NP (P_this _this) (NN _carriage)))) (P_. _.)),bad,causative,96,syntax,argument_structure,sample1.0.FG-output.rank-1,-6.215664460945924,-6.457200494940046,TRUE
Name had turned this carriage .,Name had turned this carriage .,-37.29398676567554,-6.215664460945924,(ROOT (P_Name _Name) (VP (VBD _had) (VP (VBD _turned) (NP (P_this _this) (NN _carriage)))) (P_. _.)),good,causative,96,syntax,argument_structure,sample1.0.FG-output.rank-1,-6.215664460945924,-6.457200494940046,TRUE
Name had disappeared this carriage .,Name had disappeared this carriage .,-38.89670306540339,-6.482783844233899,(ROOT (NNP _Name) (VP (VBD _had) (VP (VBD _disappeared) (NP (P_this _this) (NN _carriage)))) (. _.)),bad,causative,96,syntax,argument_structure,sample10.0.FG-output.rank-1,-6.403558796911487,-6.482783844233899,TRUE
Name had turned this carriage .,Name had turned this carriage .,-38.421352781468926,-6.403558796911487,(ROOT (NNP _Name) (VP (VBD _had) (VP (VBD _turned) (NP (P_this _this) (NN _carriage)))) (. _.)),good,causative,96,syntax,argument_structure,sample10.0.FG-output.rank-1,-6.403558796911487,-6.482783844233899,TRUE
Name had disappeared this carriage .,Name had disappeared this carriage .,-38.55285103352414,-6.425475172254024,(ROOT (P_Name _Name) (VP (VBD _had) (VP (VBD _disappeared) (DT _this) (NN _carriage))) (P_. _.)),bad,causative,96,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.861489452579328,-6.425475172254024,TRUE
Name had turned this carriage .,Name had turned this carriage .,-35.16893671547597,-5.861489452579328,(ROOT (P_Name _Name) (VP (AUX _had) (VBN _turned) (PP (P_this _this) (NN _carriage))) (P_. _.)),good,causative,96,syntax,argument_structure,sample2.0.FG-output.rank-1,-5.861489452579328,-6.425475172254024,TRUE
Name had disappeared this carriage .,Name had disappeared this carriage .,-39.19862634441601,-6.5331043907360025,(ROOT (NNP _Name) (VP (VBD _had) (VP (VBD _disappeared) (NP (P_this _this) (NN _carriage)))) (P_. _.)),bad,causative,96,syntax,argument_structure,sample3.0.FG-output.rank-1,-6.403126030411681,-6.5331043907360025,TRUE
Name had turned this carriage .,Name had turned this carriage .,-38.418756182470084,-6.403126030411681,(ROOT (P_Name _Name) (VP (AUX _had) (VBN _turned)) (NP (P_this _this) (NN _carriage)) (. _.)),good,causative,96,syntax,argument_structure,sample3.0.FG-output.rank-1,-6.403126030411681,-6.5331043907360025,TRUE
Name had disappeared this carriage .,Name had disappeared this carriage .,-38.313031580232014,-6.385505263372003,(ROOT (NP _Name) (AUX _had) (VP (VBD _disappeared) (NP (P_this _this) (NN _carriage))) (. _.)),bad,causative,96,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.890298651850002,-6.385505263372003,TRUE
Name had turned this carriage .,Name had turned this carriage .,-35.34179191110001,-5.890298651850002,(ROOT (P_Name _Name) (VP (AUX _had) (VBN _turned) (NP (P_this _this) (NN _carriage))) (. _.)),good,causative,96,syntax,argument_structure,sample4.0.FG-output.rank-1,-5.890298651850002,-6.385505263372003,TRUE
Name had disappeared this carriage .,Name had disappeared this carriage .,-39.10336063447004,-6.517226772411674,(ROOT (P_Name _Name) (VP (VBD _had) (VP (VBD _disappeared) (NP (P_this _this) (NN _carriage)))) (P_. _.)),bad,causative,96,syntax,argument_structure,sample5.0.FG-output.rank-1,-6.089698767826932,-6.517226772411674,TRUE
Name had turned this carriage .,Name had turned this carriage .,-36.538192606961594,-6.089698767826932,(ROOT (P_Name _Name) (VP (AUX _had) (VBN _turned) (PP (P_this _this) (NN _carriage))) (P_. _.)),good,causative,96,syntax,argument_structure,sample5.0.FG-output.rank-1,-6.089698767826932,-6.517226772411674,TRUE
Name had disappeared this carriage .,Name had disappeared this carriage .,-39.98388467366434,-6.663980778944057,(ROOT (NNP _Name) (VP (VBD _had) (VP (VBD _disappeared) (NP (P_this _this) (NN _carriage)))) (P_. _.)),bad,causative,96,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.85676131914033,-6.663980778944057,TRUE
Name had turned this carriage .,Name had turned this carriage .,-35.14056791484198,-5.85676131914033,(ROOT (NNP _Name) (VP (AUX _had) (VBN _turned) (NP (P_this _this) (NN _carriage))) (P_. _.)),good,causative,96,syntax,argument_structure,sample6.0.FG-output.rank-1,-5.85676131914033,-6.663980778944057,TRUE
Name had disappeared this carriage .,Name had disappeared this carriage .,-39.428163497418694,-6.571360582903115,(ROOT (NNP _Name) (VP (VBD _had) (VP (VBD _disappeared) (NP (P_this _this) (NN _carriage)))) (. _.)),bad,causative,96,syntax,argument_structure,sample7.0.FG-output.rank-1,-6.125830405855472,-6.571360582903115,TRUE
Name had turned this carriage .,Name had turned this carriage .,-36.75498243513283,-6.125830405855472,(ROOT (NNP _Name) (VP (AUX _had) (VBN _turned) (NP (P_this _this) (NN _carriage))) (. _.)),good,causative,96,syntax,argument_structure,sample7.0.FG-output.rank-1,-6.125830405855472,-6.571360582903115,TRUE
Name had disappeared this carriage .,Name had disappeared this carriage .,-38.870830623576815,-6.478471770596136,(ROOT (P_Name _Name) (VP (P_had _had) (S (VBD _disappeared) (NP (P_this _this) (NN _carriage)))) (P_. _.)),bad,causative,96,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.993912495103437,-6.478471770596136,TRUE
Name had turned this carriage .,Name had turned this carriage .,-35.963474970620624,-5.993912495103437,(ROOT (P_Name _Name) (VP (AUX _had) (VBN _turned) (NP (P_this _this) (NN _carriage))) (P_. _.)),good,causative,96,syntax,argument_structure,sample8.0.FG-output.rank-1,-5.993912495103437,-6.478471770596136,TRUE
Name had disappeared this carriage .,Name had disappeared this carriage .,-38.755851304129656,-6.459308550688276,(ROOT (P_Name _Name) (VP (VBD _had) (VP (VBD _disappeared) (NP (P_this _this) (NN _carriage)))) (. _.)),bad,causative,96,syntax,argument_structure,sample9.0.FG-output.rank-1,-6.046639946169343,-6.459308550688276,TRUE
Name had turned this carriage .,Name had turned this carriage .,-36.27983967701606,-6.046639946169343,(ROOT (P_Name _Name) (VP (VBD _had) (VP (VBD _turned) (NP (P_this _this) (NN _carriage)))) (. _.)),good,causative,96,syntax,argument_structure,sample9.0.FG-output.rank-1,-6.046639946169343,-6.459308550688276,TRUE
